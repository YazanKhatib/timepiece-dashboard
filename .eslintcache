[{"E:\\Self Projects\\timepiece\\src\\index.tsx":"1","E:\\Self Projects\\timepiece\\src\\components\\FormElements\\FormElements.tsx":"2","E:\\Self Projects\\timepiece\\src\\hoc\\helpers.ts":"3","E:\\Self Projects\\timepiece\\src\\services\\store.ts":"4","E:\\Self Projects\\timepiece\\src\\containers\\LoginForm\\LoginForm.tsx":"5","E:\\Self Projects\\timepiece\\src\\containers\\LoginForm\\LoginFormReducer.ts":"6","E:\\Self Projects\\timepiece\\src\\components\\Loader\\Loader.tsx":"7","E:\\Self Projects\\timepiece\\src\\pages\\Login\\Login.tsx":"8"},{"size":764,"mtime":1608411168703,"results":"9","hashOfConfig":"10"},{"size":4010,"mtime":1608414468400,"results":"11","hashOfConfig":"10"},{"size":115,"mtime":1608140715009,"results":"12","hashOfConfig":"10"},{"size":337,"mtime":1608373053228,"results":"13","hashOfConfig":"10"},{"size":3323,"mtime":1608396284834,"results":"14","hashOfConfig":"10"},{"size":1519,"mtime":1608395436609,"results":"15","hashOfConfig":"10"},{"size":562,"mtime":1608395920621,"results":"16","hashOfConfig":"10"},{"size":824,"mtime":1608413915629,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"pn4hqa",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Self Projects\\timepiece\\src\\index.tsx",["36"],"E:\\Self Projects\\timepiece\\src\\components\\FormElements\\FormElements.tsx",[],"E:\\Self Projects\\timepiece\\src\\hoc\\helpers.ts",[],["37","38"],"E:\\Self Projects\\timepiece\\src\\services\\store.ts",[],"E:\\Self Projects\\timepiece\\src\\containers\\LoginForm\\LoginForm.tsx",["39"],"import React, { useState } from \"react\";\r\nimport { useTranslation } from \"react-multi-lang\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { loginSlice, loginState } from \"./LoginFormReducer\";\r\n\r\nimport { Checkbox, InputField } from \"../../components/FormElements/FormElements\";\r\nimport { RippleLoader, SuccessMark } from \"../../components/Loader/Loader\";\r\n\r\nimport './LoginForm.css'\r\n\r\n\r\nexport default function () {\r\n\r\n    // Tranlsation\r\n    const t = useTranslation()\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const loginState = useSelector( ( state: { login: loginState } ) => state.login )\r\n\r\n    const [username, setUsername] = useState<string>(\"\");\r\n    const [password, setPassword] = useState<string>(\"\");\r\n    const [usernameError, setUsernameError] = useState<string>(\"\");\r\n    const [passwordError, setPasswordError] = useState<string>(\"\");\r\n    const [showSucessMark, setShowSuccessMark] = useState<boolean>(false)\r\n\r\n    const login = () => {\r\n        \r\n        let isReadyToSubmit: boolean = true\r\n        \r\n        if(!username) {\r\n            setUsernameError(t(\"required_error\"))\r\n            isReadyToSubmit = false\r\n        }\r\n        \r\n        if(!password) {\r\n            setPasswordError(t(\"required_error\"))\r\n            isReadyToSubmit = false\r\n        }\r\n        \r\n        if(!isReadyToSubmit) return\r\n\r\n        dispatch( loginSlice.actions.load({}) )\r\n\r\n        setTimeout(() => {\r\n            dispatch( loginSlice.actions.success({}) )\r\n            setTimeout(() => {\r\n                setShowSuccessMark(true)\r\n            }, 200);\r\n        }, 2000);\r\n\r\n    }\r\n\r\n    return(\r\n        <div className=\"login-form\">\r\n            \r\n            <form onSubmit={(e: React.FormEvent<HTMLFormElement>) => e.preventDefault()}>\r\n                \r\n                <InputField\r\n                    value={username}\r\n                    type=\"text\"\r\n                    placeholder={t('username')}\r\n                    error={usernameError}\r\n                    disabled={loginState.isLoading || loginState.isSuccess}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        setUsername(e.currentTarget.value);\r\n                        setUsernameError(\"\")\r\n                    } } />\r\n\r\n                <InputField\r\n                    value={password}\r\n                    type=\"password\"\r\n                    placeholder={t('password')}\r\n                    error={passwordError}\r\n                    disabled={loginState.isLoading || loginState.isSuccess}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        setPassword(e.currentTarget.value);\r\n                        setPasswordError(\"\")\r\n                    } } />\r\n                \r\n                <Checkbox label={t('remember_me')} disabled={loginState.isLoading || loginState.isSuccess} />\r\n                \r\n                <div className=\"text-center\"><button className={ \"button bg-gold color-white round\" + (loginState.isSuccess ? \" scale\" : '') } style={{ width: loginState.isLoading ? 50 : 200 }} onClick={login}>{ loginState.isLoading ? <RippleLoader /> : t('login') }</button></div>\r\n\r\n                { showSucessMark ? <SuccessMark /> : '' }\r\n\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\LoginForm\\LoginFormReducer.ts",[],"E:\\Self Projects\\timepiece\\src\\components\\Loader\\Loader.tsx",[],"E:\\Self Projects\\timepiece\\src\\pages\\Login\\Login.tsx",["40"],{"ruleId":"41","severity":1,"message":"42","line":18,"column":10,"nodeType":"43","messageId":"44","endLine":18,"endColumn":20},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":13,"column":1,"nodeType":"51","endLine":93,"endColumn":2},{"ruleId":"52","severity":1,"message":"53","line":15,"column":50,"nodeType":"54","endLine":15,"endColumn":85},"@typescript-eslint/no-unused-vars","'InputField' is defined but never used.","Identifier","unusedVar","no-native-reassign",["55"],"no-negated-in-lhs",["56"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]