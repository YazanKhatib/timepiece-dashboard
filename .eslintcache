[{"E:\\Self Projects\\timepiece\\src\\index.tsx":"1","E:\\Self Projects\\timepiece\\src\\components\\FormElements\\FormElements.tsx":"2","E:\\Self Projects\\timepiece\\src\\containers\\LoginForm\\LoginForm.tsx":"3","E:\\Self Projects\\timepiece\\src\\components\\Loader\\Loader.tsx":"4","E:\\Self Projects\\timepiece\\src\\pages\\Login\\Login.tsx":"5","E:\\Self Projects\\timepiece\\src\\services\\Store\\store.ts":"6","E:\\Self Projects\\timepiece\\src\\services\\routes\\AppRoutes.tsx":"7","E:\\Self Projects\\timepiece\\src\\services\\store\\store.ts":"8","E:\\Self Projects\\timepiece\\src\\services\\hoc\\helpers.ts":"9","E:\\Self Projects\\timepiece\\src\\services\\routes\\ScrollToTop.tsx":"10","E:\\Self Projects\\timepiece\\src\\pages\\Dashboard\\Dashboard.tsx":"11","E:\\Self Projects\\timepiece\\src\\components\\Nav\\Nav.tsx":"12","E:\\Self Projects\\timepiece\\src\\containers\\Analytics\\Analytics.tsx":"13","E:\\Self Projects\\timepiece\\src\\components\\Statistics\\Statistics.tsx":"14","E:\\Self Projects\\timepiece\\src\\components\\Filters\\Filters.tsx":"15","E:\\Self Projects\\timepiece\\src\\services\\api\\api.tsx":"16","E:\\Self Projects\\timepiece\\src\\components\\Modal\\Modal.tsx":"17","E:\\Self Projects\\timepiece\\src\\components\\Alerts\\Alerts.tsx":"18","E:\\Self Projects\\timepiece\\src\\components\\Table\\Table.tsx":"19","E:\\Self Projects\\timepiece\\src\\components\\TableActionBar\\TableActionBar.tsx":"20","E:\\Self Projects\\timepiece\\src\\containers\\Dealers\\Dealers.tsx":"21","E:\\Self Projects\\timepiece\\src\\containers\\LoginForm\\LoginFormSlice.ts":"22","E:\\Self Projects\\timepiece\\src\\containers\\Dealers\\DealersSlice.ts":"23","E:\\Self Projects\\timepiece\\src\\containers\\Users\\UsersSlice.ts":"24","E:\\Self Projects\\timepiece\\src\\containers\\Users\\Users.tsx":"25","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\WatchesSlice.ts":"26","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\Watches.tsx":"27","E:\\Self Projects\\timepiece\\src\\containers\\Analytics\\AnalyticsSlice.ts":"28","E:\\Self Projects\\timepiece\\src\\components\\DetailsModal\\DetailsModal.tsx":"29","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\AddWatchModal.tsx":"30","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\Steps\\Step1.tsx":"31","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\AddWatchSlice.ts":"32","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\Steps\\Step2.tsx":"33","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\Steps\\Step3.tsx":"34","E:\\Self Projects\\timepiece\\src\\containers\\Offers\\Offers.tsx":"35","E:\\Self Projects\\timepiece\\src\\containers\\Offers\\OffersSclice.tsx":"36","E:\\Self Projects\\timepiece\\src\\containers\\Brands\\AddModal\\AddBrandSlice.ts":"37","E:\\Self Projects\\timepiece\\src\\containers\\Brands\\BrandsSlice.tsx":"38","E:\\Self Projects\\timepiece\\src\\containers\\Brands\\Brands.tsx":"39","E:\\Self Projects\\timepiece\\src\\containers\\Brands\\AddModal\\AddBrandModal.tsx":"40","E:\\Self Projects\\timepiece\\src\\components\\PredefinedMenus\\PredefinedMenusSlice.ts":"41","E:\\Self Projects\\timepiece\\src\\components\\PredefinedMenus\\PredefinedMenus.tsx":"42","E:\\Self Projects\\timepiece\\src\\containers\\Orders\\OrdersSclice.tsx":"43","E:\\Self Projects\\timepiece\\src\\containers\\Orders\\Orders.tsx":"44","E:\\Self Projects\\timepiece\\src\\containers\\ResetPasswordForm\\ResetPasswordFormSlice.tsx":"45","E:\\Self Projects\\timepiece\\src\\pages\\ResetPassword\\ResetPassword.tsx":"46","E:\\Self Projects\\timepiece\\src\\containers\\ResetPasswordForm\\ResetPasswordForm.tsx":"47","E:\\Self Projects\\timepiece\\src\\containers\\Certificates\\CertificatesSlice.ts":"48","E:\\Self Projects\\timepiece\\src\\containers\\Certificates\\Certificates.tsx":"49","E:\\Self Projects\\timepiece\\src\\containers\\Notifications\\Notifications.tsx":"50"},{"size":966,"mtime":1609354939112,"results":"51","hashOfConfig":"52"},{"size":5514,"mtime":1610035651255,"results":"53","hashOfConfig":"52"},{"size":5353,"mtime":1626092482348,"results":"54","hashOfConfig":"52"},{"size":943,"mtime":1610014346431,"results":"55","hashOfConfig":"52"},{"size":824,"mtime":1609364525998,"results":"56","hashOfConfig":"52"},{"size":340,"mtime":1608464747623,"results":"57","hashOfConfig":"58"},{"size":1788,"mtime":1614536574807,"results":"59","hashOfConfig":"52"},{"size":1702,"mtime":1611055939683,"results":"60","hashOfConfig":"52"},{"size":639,"mtime":1609354939122,"results":"61","hashOfConfig":"52"},{"size":452,"mtime":1609354939125,"results":"62","hashOfConfig":"52"},{"size":3162,"mtime":1624204007219,"results":"63","hashOfConfig":"52"},{"size":3132,"mtime":1612866593674,"results":"64","hashOfConfig":"52"},{"size":3591,"mtime":1614122507464,"results":"65","hashOfConfig":"52"},{"size":3458,"mtime":1609699186473,"results":"66","hashOfConfig":"52"},{"size":1046,"mtime":1609354939087,"results":"67","hashOfConfig":"52"},{"size":27698,"mtime":1626458091216,"results":"68","hashOfConfig":"52"},{"size":4474,"mtime":1614123318804,"results":"69","hashOfConfig":"52"},{"size":649,"mtime":1609364505381,"results":"70","hashOfConfig":"52"},{"size":2670,"mtime":1610109633848,"results":"71","hashOfConfig":"52"},{"size":1930,"mtime":1610194699082,"results":"72","hashOfConfig":"52"},{"size":9567,"mtime":1626091852381,"results":"73","hashOfConfig":"52"},{"size":797,"mtime":1609608073014,"results":"74","hashOfConfig":"52"},{"size":2916,"mtime":1610107431266,"results":"75","hashOfConfig":"52"},{"size":2584,"mtime":1610116426452,"results":"76","hashOfConfig":"52"},{"size":8566,"mtime":1626091952746,"results":"77","hashOfConfig":"52"},{"size":6204,"mtime":1623960477019,"results":"78","hashOfConfig":"52"},{"size":17788,"mtime":1623962517872,"results":"79","hashOfConfig":"52"},{"size":1423,"mtime":1609756610194,"results":"80","hashOfConfig":"52"},{"size":1702,"mtime":1624207829838,"results":"81","hashOfConfig":"52"},{"size":1671,"mtime":1610206039345,"results":"82","hashOfConfig":"52"},{"size":7174,"mtime":1610205458445,"results":"83","hashOfConfig":"52"},{"size":3038,"mtime":1610223006199,"results":"84","hashOfConfig":"52"},{"size":6419,"mtime":1610205507899,"results":"85","hashOfConfig":"52"},{"size":9518,"mtime":1623960487555,"results":"86","hashOfConfig":"52"},{"size":12249,"mtime":1627144411511,"results":"87","hashOfConfig":"52"},{"size":3195,"mtime":1610201751841,"results":"88","hashOfConfig":"52"},{"size":1030,"mtime":1610135539295,"results":"89","hashOfConfig":"52"},{"size":2104,"mtime":1610142141282,"results":"90","hashOfConfig":"52"},{"size":5164,"mtime":1612865887108,"results":"91","hashOfConfig":"52"},{"size":4135,"mtime":1612866591654,"results":"92","hashOfConfig":"52"},{"size":753,"mtime":1610197465982,"results":"93","hashOfConfig":"52"},{"size":1550,"mtime":1612865799194,"results":"94","hashOfConfig":"52"},{"size":3195,"mtime":1610202242897,"results":"95","hashOfConfig":"52"},{"size":12242,"mtime":1627144544037,"results":"96","hashOfConfig":"52"},{"size":872,"mtime":1610984262887,"results":"97","hashOfConfig":"52"},{"size":1147,"mtime":1610990015546,"results":"98","hashOfConfig":"52"},{"size":5147,"mtime":1610990784549,"results":"99","hashOfConfig":"52"},{"size":2189,"mtime":1611060095505,"results":"100","hashOfConfig":"52"},{"size":6573,"mtime":1612865982678,"results":"101","hashOfConfig":"102"},{"size":2139,"mtime":1626458144959,"results":"103","hashOfConfig":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"ropia8",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"106"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pn4hqa",{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"106"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"106"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"106"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"106"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"106"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"106"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"106"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"106"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"106"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"106"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"106"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"106"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"106"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"106"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"106"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"106"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"106"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"106"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"106"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"106"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"106"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"106"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"106"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"106"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"106"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"106"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"106"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},"scut8a",{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"106"},"E:\\Self Projects\\timepiece\\src\\index.tsx",[],["237","238"],"E:\\Self Projects\\timepiece\\src\\components\\FormElements\\FormElements.tsx",[],"E:\\Self Projects\\timepiece\\src\\containers\\LoginForm\\LoginForm.tsx",["239","240"],"import React, { useState } from \"react\";\r\n\r\n// Translation\r\nimport { useTranslation } from \"react-multi-lang\";\r\n\r\n// Cookies\r\nimport { useCookies } from \"react-cookie\";\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loginSlice, loginState } from \"./LoginFormSlice\";\r\n\r\n// Compoentns\r\nimport { Checkbox, InputField } from \"../../components/FormElements/FormElements\";\r\nimport { RippleLoader, SuccessMark } from \"../../components/Loader/Loader\";\r\nimport { StaticAlert } from \"../../components/Alerts/Alerts\";\r\n\r\n// Stylesheet\r\nimport './LoginForm.css'\r\n\r\n// Services\r\nimport API from '../../services/api/api'\r\nimport { addToDate } from \"../../services/hoc/helpers\";\r\n\r\nexport default function () {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const loginState = useSelector( ( state: { login: loginState } ) => state.login )\r\n\r\n    // Hooks\r\n    const [username, setUsername] = useState<string>(\"\");\r\n    const [usernameError, setUsernameError] = useState<string>(\"\");\r\n    const [password, setPassword] = useState<string>(\"\");\r\n    const [passwordError, setPasswordError] = useState<string>(\"\");\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n    const [showSucessMark, setShowSuccessMark] = useState<boolean>(false)\r\n    const [errorMessage, setErrorMessage] = useState<string>(\"Error!\")\r\n\r\n    // Cookies hooks\r\n    const [_, setCookie] = useCookies();\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    const login = () => {\r\n        \r\n        if(!username) {\r\n            setUsernameError(t(\"required_error\"))\r\n            return\r\n        }\r\n        \r\n        if(!password) {\r\n            setPasswordError(t(\"required_error\"))\r\n            return\r\n        }\r\n\r\n        dispatch( loginSlice.actions.load() )\r\n\r\n        ENDPOINTS.auth().login({ username: username.toLowerCase(), password })\r\n        .then((response: any) => {\r\n            \r\n            if(response.data?.data) {\r\n\r\n                dispatch( loginSlice.actions.success() )\r\n                setShowSuccessMark(true)\r\n                setTimeout(() => {\r\n                    let expires: Date = rememberMe ? addToDate( new Date(), \"years\", 1 ) : addToDate( new Date(), \"hours\", 1 );\r\n                    setCookie(\"refresh_token\", { refreshToken: response.data.data.loginAdmin?.refreshToken }, { expires })\r\n                    setCookie(\"token\", { accessToken: response.data.data.loginAdmin?.accessToken }, { expires: addToDate( new Date(), \"minutes\", 29 ) })\r\n                    setCookie(\"userinfo\", response.data.data.loginAdmin?.user, { expires })\r\n                    dispatch( loginSlice.actions.init() )\r\n                }, 1500);\r\n\r\n            } else {\r\n                dispatch( loginSlice.actions.error(true) )\r\n                setErrorMessage(response.data?.errors[0]?.message)\r\n            }\r\n\r\n        })\r\n        .catch((error: any) => {\r\n            dispatch( loginSlice.actions.error(true) )\r\n        })\r\n\r\n    }\r\n\r\n    return(\r\n        <div className=\"login-form\">\r\n            \r\n            <form onSubmit={(e: React.FormEvent<HTMLFormElement>) => e.preventDefault()}>\r\n                \r\n                {\r\n                    loginState.isError ? <StaticAlert show={true} type={\"error\"}>\r\n                        {/* {t(\"login_error\")} */}\r\n                        {errorMessage}\r\n                    </StaticAlert> : \"\"\r\n                }\r\n\r\n                <InputField\r\n                    value={username}\r\n                    type=\"text\"\r\n                    placeholder={t('username')}\r\n                    error={usernameError}\r\n                    disabled={loginState.isLoading || loginState.isSuccess}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        setUsername(e.currentTarget.value);\r\n                        setUsernameError(\"\")\r\n                        if( loginState.isError ) dispatch( loginSlice.actions.error(false) )\r\n                    } } />\r\n\r\n                <InputField\r\n                    value={password}\r\n                    type=\"password\"\r\n                    placeholder={t('password')}\r\n                    error={passwordError}\r\n                    disabled={loginState.isLoading || loginState.isSuccess}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        setPassword(e.currentTarget.value);\r\n                        setPasswordError(\"\")\r\n                        if( loginState.isError ) dispatch( loginSlice.actions.error(false) )\r\n                    } } />\r\n                \r\n                <Checkbox\r\n                    label={t('remember_me')}\r\n                    disabled={loginState.isLoading || loginState.isSuccess}\r\n                    checked={rememberMe}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setRememberMe(e.target.checked)} />\r\n                \r\n                <div className=\"text-center\"><button className={ \"button bg-gold color-white round\" + (loginState.isSuccess ? \" scale\" : '') } style={{ width: loginState.isLoading ? 50 : 200 }} onClick={login}>{ loginState.isLoading ? <RippleLoader /> : t('login') }</button></div>\r\n\r\n                { showSucessMark ? <SuccessMark /> : '' }\r\n\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\components\\Loader\\Loader.tsx",[],"E:\\Self Projects\\timepiece\\src\\pages\\Login\\Login.tsx",["241"],"import { LanguageSwitcher, LightDarkModeSwitcher } from \"../../components/FormElements/FormElements\"\r\nimport LoginForm from \"../../containers/LoginForm/LoginForm\"\r\n\r\nimport Logo from '../../assets/images/logo/primary.svg'\r\n\r\nimport './Login.css'\r\n\r\nconst Login = () => {\r\n    return(\r\n        <div className=\"login-page\">\r\n            \r\n            <div className=\"layout\">\r\n\r\n                <div className=\"form-holder\">\r\n                    <div className=\"text-center\"><img src={Logo} className=\"logo\" /></div>\r\n                    <LoginForm />\r\n                </div>\r\n\r\n                <div className=\"switch-actions\">\r\n                    <LightDarkModeSwitcher />\r\n                    <LanguageSwitcher />\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","E:\\Self Projects\\timepiece\\src\\services\\Store\\store.ts",[],"E:\\Self Projects\\timepiece\\src\\services\\routes\\AppRoutes.tsx",["242"],"import React, { Component } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\n\r\nimport ScrollToTop from './ScrollToTop'\r\nimport Login from '../../pages/Login/Login'\r\nimport ResetPassword from '../../pages/ResetPassword/ResetPassword'\r\nimport Dashboard from '../../pages/Dashboard/Dashboard'\r\nimport { withCookies } from \"react-cookie\";\r\n\r\nimport '../../assets/css/responsive.css'\r\n\r\nclass AppRoutes extends Component<{cookies: any}> {\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n        if(localStorage.getItem(\"lang\"))\r\n            document.body.classList.add(localStorage.getItem(\"lang\") == 'ar' ? 'rtl' : 'ltr')\r\n        if(localStorage.getItem(\"theme\"))\r\n            document.body.classList.add( String( localStorage.getItem(\"theme\") ) )\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <Router basename=\"/\">\r\n                <ScrollToTop>\r\n                    { ( !this.props.cookies.get(\"userinfo\") || !this.props.cookies.get(\"token\") || !this.props.cookies.get(\"refresh_token\") ) ?\r\n                    \r\n                    // Auth pages\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Login} />\r\n                        <Route exact path=\"/reset-password/:token\" component={ResetPassword} />\r\n                        <Route path=\"/\" component={() => <Redirect to=\"/\" />} />\r\n                    </Switch> :\r\n\r\n                    // Dashboard pages\r\n                    <Switch>\r\n                        <Route path=\"/:section\" component={Dashboard} />\r\n                        <Route path=\"/\" component={Dashboard} />\r\n                    </Switch> }\r\n                </ScrollToTop>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withCookies(AppRoutes)","E:\\Self Projects\\timepiece\\src\\services\\store\\store.ts",[],"E:\\Self Projects\\timepiece\\src\\services\\hoc\\helpers.ts",[],"E:\\Self Projects\\timepiece\\src\\services\\routes\\ScrollToTop.tsx",["243"],"import React, { Component } from \"react\"\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\"\r\n\r\nclass ScrollToTop extends Component<RouteComponentProps> {\r\n    \r\n    componentDidUpdate(prevProps: RouteComponentProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scrollTo(0, 0)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop)","E:\\Self Projects\\timepiece\\src\\pages\\Dashboard\\Dashboard.tsx",["244","245"],"import React from 'react'\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Components\r\nimport { SideNav, TopNav } from '../../components/Nav/Nav'\r\nimport Analytics from '../../containers/Analytics/Analytics'\r\nimport Dealers from '../../containers/Dealers/Dealers'\r\nimport Users from '../../containers/Users/Users'\r\nimport Watches from '../../containers/Watches/Watches'\r\nimport Orders from '../../containers/Orders/Orders'\r\nimport Offers from '../../containers/Offers/Offers'\r\nimport Certificates from '../../containers/Certificates/Certificates'\r\nimport Brands from '../../containers/Brands/Brands'\r\n\r\n// Stylesheet\r\nimport './Dashboard.css'\r\nimport Notifications from '../../containers/Notifications/Notifications'\r\n\r\nexport default (props: any) => {\r\n\r\n    const t = useTranslation()\r\n\r\n    const navList = [\r\n        {\r\n            icon: \"icon-analysis\",\r\n            name: t(\"analytics\"),\r\n            link: \"/analytics\"\r\n        },\r\n        {\r\n            icon: \"icon-username-1\",\r\n            name: t(\"dealers\"),\r\n            link: \"/dealers\"\r\n        },\r\n        {\r\n            icon: \"icon-time-1\",\r\n            name: t(\"watches\"),\r\n            link: \"/watches\"\r\n        },\r\n        {\r\n            icon: \"icon-users\",\r\n            name: t(\"users\"),\r\n            link: \"/users\"\r\n        },\r\n        {\r\n            icon: \"icon-product\",\r\n            name: t(\"orders\"),\r\n            link: \"/orders\"\r\n        },\r\n        {\r\n            icon: \"icon-orders\",\r\n            name: t(\"offers\"),\r\n            link: \"/offers\"\r\n        },\r\n        // {\r\n        //     icon: \"icon-orders\",\r\n        //     name: t(\"certificates\"),\r\n        //     link: \"/certificates\"\r\n        // },\r\n        {\r\n            icon: \"icon-categories-1\",\r\n            name: t(\"brands\"),\r\n            link: \"/brands\"\r\n        },\r\n        {\r\n            icon: \"icon-notification-1\",\r\n            name: t(\"notifications\"),\r\n            link: \"/notifications\"\r\n        },\r\n    ]\r\n\r\n    let section = props.match.params.section ? props.match.params.section.toLowerCase() : \"analytics\"\r\n    \r\n    const dashboardContent = () => {\r\n        switch (section) {\r\n            case \"analytics\":\r\n                return(<Analytics />)\r\n            case \"dealers\":\r\n                return(<Dealers />)\r\n            case \"watches\":\r\n                return(<Watches />)\r\n            case \"users\":\r\n                return(<Users />)\r\n            case \"orders\":\r\n                return(<Orders />)\r\n            case \"offers\":\r\n                return(<Offers />)\r\n            // case \"certificates\":\r\n            //     return(<Certificates />)\r\n            case \"brands\":\r\n                return(<Brands />)\r\n            case \"notifications\":\r\n                return(<Notifications />)\r\n            default:\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"dashboard-page\">\r\n            <SideNav list={navList} active={section} />\r\n            <div className=\"main-side\">\r\n\r\n                <TopNav />\r\n\r\n                <div className=\"content\">\r\n                    { dashboardContent() }\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","E:\\Self Projects\\timepiece\\src\\components\\Nav\\Nav.tsx",["246","247","248","249","250"],"import React, { useState } from 'react'\r\nimport { Link, Redirect, useLocation } from 'react-router-dom'\r\n\r\n// Custom scrollbar\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\n// Stylesheet\r\nimport './Nav.css'\r\n\r\n// Assets\r\nimport Logo from '../../assets/images/logo/primary.svg'\r\nimport { LanguageSwitcher, LightDarkModeSwitcher } from '../FormElements/FormElements'\r\nimport { useCookies } from 'react-cookie'\r\n\r\ninterface NavProps {\r\n    list: {\r\n        icon: string,\r\n        name: string,\r\n        link: string\r\n    }[],\r\n    active: string | null\r\n}\r\n\r\nexport const SideNav = (props: NavProps) => {\r\n\r\n\r\n    const getActiveIndexByName = (name: string | null): number => {\r\n        let matched_index = 0\r\n        props.list.map((item, index) => {\r\n            if (item.link.substring(1) === name)\r\n                matched_index = index\r\n        })\r\n        return matched_index\r\n    }\r\n\r\n    const getActiveBoxPositionByIndex = (index: number): number => {\r\n        // return index === 0 ? index * 90 : index === props.list.length - 1 ? index * 90 + 10 : index * 90 + 5\r\n        return index * 90\r\n    }\r\n\r\n    const [activeBox, setActiveBox] = useState<number>(getActiveBoxPositionByIndex(getActiveIndexByName(props.active)))\r\n\r\n    return (\r\n        <nav className=\"side-nav\">\r\n            <Scrollbars\r\n                autoHeight\r\n                autoHeightMin=\"75vh\"\r\n                autoHide\r\n                renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" style={{display:\"none\"}}/>}\r\n                renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" style={{display:\"none\"}}/>} >\r\n                <div className=\"active-box\" style={{ top: activeBox }} />\r\n                <ul>\r\n                    {props.list.map((item, index) => {\r\n                        return (\r\n                            <li key={index} className={item.link.substring(1) === props.active ? \"active\" : \"\"} onClick={() => setActiveBox(getActiveBoxPositionByIndex(index))}><Link to={item.link}><span><i className={item.icon}></i> {item.name}</span></Link></li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </Scrollbars>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport const TopNav = () => {\r\n\r\n    // React hooks\r\n    const [redirect, setRedirect] = useState<boolean>(false);\r\n\r\n    // Cookies hooks\r\n    const [_, __, removeCookie] = useCookies(['userinfo']);\r\n\r\n    const logout = () => {\r\n        setRedirect(true)\r\n        removeCookie(\"userinfo\")\r\n        removeCookie(\"token\")\r\n        removeCookie(\"refresh_token\")\r\n    }\r\n\r\n    return (\r\n        <nav className=\"top-nav\">\r\n            <img src={Logo} className=\"logo\" />\r\n\r\n            <div className=\"actions\">\r\n\r\n                <div className=\"switchers\">\r\n                    <LightDarkModeSwitcher />\r\n                    <span className=\"margin-10\" />\r\n                    <LanguageSwitcher />\r\n                </div>\r\n\r\n                <i className=\"icon-logout\" onClick={logout} />\r\n\r\n            </div>\r\n\r\n            { redirect ? <Redirect to='/'/> : '' }\r\n\r\n        </nav>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Analytics\\Analytics.tsx",["251","252","253","254","255","256","257","258"],"import React, { useEffect } from 'react'\r\nimport { Col, Row } from 'react-grid-system'\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { analyticsSlice, analyticsState } from './AnalyticsSlice'\r\n\r\n// API\r\nimport API from '../../services/api/api'\r\n\r\n// Components\r\nimport { LineChart, NumberBox } from '../../components/Statistics/Statistics'\r\n\r\nexport default () => {\r\n\r\n    const t = useTranslation()\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state = useSelector( ( state: { analytics: analyticsState } ) => state.analytics )\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n\r\n    // Fetch data\r\n    const fetchData = () => {\r\n\r\n        dispatch( analyticsSlice.actions.setIsFetching(true) )\r\n\r\n        let success = 0;\r\n\r\n        // Users\r\n        ENDPOINTS.analytics().users()\r\n        .then((response: any) => {\r\n            dispatch( analyticsSlice.actions.setUsers(response.data?.data?.getUsers?.total) )\r\n        })\r\n        .catch((error: any) => {})\r\n\r\n        // Dealers\r\n        ENDPOINTS.analytics().dealers()\r\n        .then((response: any) => {\r\n            dispatch( analyticsSlice.actions.setDealers(response.data?.data?.getUsers?.total) )\r\n        })\r\n        .catch((error: any) => {})\r\n\r\n        // Watches\r\n        ENDPOINTS.analytics().watches()\r\n        .then((response: any) => {\r\n            dispatch( analyticsSlice.actions.setWatches(response.data?.data?.getProducts?.total) )\r\n        })\r\n        .catch((error: any) => {})\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [])\r\n\r\n    let LineChartLabels = [t(\"sa\"), t(\"su\"), t(\"mo\"), t(\"tu\"), t(\"we\"), t(\"th\"), t(\"fr\")]\r\n    let LineChartDatasets = [\r\n        {\r\n            color: '#FF0077',\r\n            label: t('users'),\r\n            data: [10, 5, 7, 5, 12, 10, 2]\r\n        },\r\n        {\r\n            color: '#FFBB52',\r\n            label: t('dealers'),\r\n            data: [5, 2, 3, 6, 0, 4, 2]\r\n        },\r\n        {\r\n            color: '#00ABFF',\r\n            label: t('watches'),\r\n            data: [8, 6, 4, 15, 8, 5, 4]\r\n        }\r\n    ]\r\n\r\n    let GrowthLabels = [t(\"jan\"), t(\"feb\"), t(\"mar\"), t(\"apr\"), t(\"may\"), t(\"jun\"), t(\"jul\"), t(\"aug\"), t(\"sep\"), t(\"oct\"), t(\"nov\"), t(\"dec\")]\r\n    let GrowthDatasets = [\r\n        {\r\n            color: '#FF0077',\r\n            label: t('growth'),\r\n            data: [1, 2, 3, 4, 7, 10, 13, 15, 20, 25, 27, 28, 30]\r\n        }\r\n    ]\r\n\r\n    return (\r\n\r\n        <Row className=\"mobile-nomargin\" style={{ width: \"100%\" }}>\r\n\r\n            <Col className=\"mobile-nopadd\" md={4}>\r\n                <NumberBox isLoading={state.users === null} showFilter={false} label={t(\"users\")} value={<>{state.users}</>} />\r\n            </Col>\r\n\r\n            <Col className=\"mobile-nopadd\" md={4}>\r\n                <NumberBox isLoading={state.dealers === null} showFilter={false} label={t(\"dealers\")} value={<>{state.dealers}</>} />\r\n            </Col>\r\n\r\n            <Col className=\"mobile-nopadd\" md={4}>\r\n                <NumberBox isLoading={state.watches === null} showFilter={false} label={t(\"watches\")} value={<>{state.watches}</>} />\r\n            </Col>\r\n\r\n            {/* <Col className=\"mobile-nopadd\" md={6}>\r\n                <LineChart title={t(\"items_by_time\")} labels={LineChartLabels} datasets={LineChartDatasets} />\r\n            </Col>\r\n\r\n            <Col className=\"mobile-nopadd\" md={6}>\r\n                <LineChart title={t(\"growth_rate\")} labels={GrowthLabels} datasets={GrowthDatasets} />\r\n            </Col> */}\r\n            \r\n        </Row>\r\n    )\r\n}","E:\\Self Projects\\timepiece\\src\\components\\Statistics\\Statistics.tsx",[],"E:\\Self Projects\\timepiece\\src\\components\\Filters\\Filters.tsx",[],"E:\\Self Projects\\timepiece\\src\\services\\api\\api.tsx",["259","260"],"import axios from 'axios';\r\nimport { Component } from 'react';\r\nimport { useCookies, withCookies } from 'react-cookie';\r\nimport { addWatchFields } from '../../containers/Watches/AddModal/AddWatchSlice';\r\nimport { addToDate } from '../hoc/helpers';\r\n\r\ninterface pagination {\r\n    offset: number;\r\n    limit: number;\r\n}\r\n\r\nconst GetCookies = () => {\r\n    const [cookies, setCookie, removeCookie] = useCookies();\r\n    return {cookies, setCookie, removeCookie}\r\n}\r\n\r\nclass API {\r\n    url: string;\r\n\r\n    constructor() {\r\n        this.url = 'https://dev.timepiece.qa/graphql';\r\n\r\n        const { cookies, setCookie, removeCookie } = GetCookies();\r\n        console.log(cookies)\r\n        // Add Auth header\r\n        axios.interceptors.request.use(async (config) => {\r\n            if (cookies.userinfo && !config.headers.skipInterceptors) {\r\n                if (cookies.token)\r\n                    config.headers['Authorization'] =\r\n                        'Bearer ' + cookies.token.accessToken;\r\n                else {\r\n                    // Rrefresh token\r\n                    if (cookies.refresh_token) {\r\n                        await axios({\r\n                            url: 'https://dev.timepiece.qa/refresh_token',\r\n                            method: 'post',\r\n                            data: {},\r\n                            headers: {\r\n                                skipInterceptors: true,\r\n                                refreshToken: cookies.refresh_token.refreshToken,\r\n                            },\r\n                        }).then((response) => {\r\n                            setCookie(\r\n                                'token',\r\n                                { accessToken: response.data.accessToken },\r\n                                { expires: addToDate(new Date(), 'minutes', 29) },\r\n                            );\r\n                            // setCookie('refresh_token', {\r\n                            //     refreshToken: response.data.refreshToken,\r\n                            // });\r\n                            config.headers['Authorization'] =\r\n                                'Bearer ' + response.data.accessToken;\r\n                        });\r\n                    } else {\r\n                        removeCookie('userinfo');\r\n                        removeCookie('token');\r\n                        removeCookie('refresh_token');\r\n                    }\r\n                }\r\n            }\r\n            return config;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Authentication APIs\r\n     * @param {}\r\n     */\r\n    auth() {\r\n        var endpoints: { login: Function } = { login: Function };\r\n\r\n        endpoints.login = (data: { username: string; password: string }) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                            loginAdmin(username: \"${data.username}\", password: \"${data.password}\") { user { id, username, email }, accessToken, refreshToken }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n    /**\r\n     * Analytics APIs\r\n     * @param {}\r\n     */\r\n    analytics() {\r\n        var endpoints: { users: Function; dealers: Function; watches: Function } = {\r\n            users: Function,\r\n            dealers: Function,\r\n            watches: Function,\r\n        };\r\n\r\n        endpoints.users = () =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                            getUsers(dealer: false) { total }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.dealers = () =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                            getUsers(dealer: true) { total }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.watches = () =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                            getProducts { total }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n    /**\r\n     * Dealers APIs\r\n     * @param {}\r\n     */\r\n    dealers() {\r\n        var endpoints: { index: Function } = { index: Function };\r\n\r\n        endpoints.index = (data: pagination) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                            getUsers(dealer: true, limit: ${data.limit}, offset: ${data.offset}) {\r\n                                total,\r\n                                results {\r\n                                    id,\r\n                                    username,\r\n                                    first_name,\r\n                                    last_name,\r\n                                    email,\r\n                                    confirmed,\r\n                                    phone,\r\n                                    birth,\r\n                                    gender,\r\n                                    address,\r\n                                    blocked\r\n                                }\r\n                            }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n    /**\r\n     * Users APIs\r\n     * @param {}\r\n     */\r\n    users() {\r\n        var endpoints: { index: Function; update: Function; delete: Function } = {\r\n            index: Function,\r\n            update: Function,\r\n            delete: Function,\r\n        };\r\n\r\n        endpoints.index = (data: pagination) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                            getUsers(dealer: false, limit: ${data.limit}, offset: ${data.offset}) {\r\n                                total,\r\n                                results {\r\n                                    id,\r\n                                    username,\r\n                                    first_name,\r\n                                    last_name,\r\n                                    email,\r\n                                    confirmed,\r\n                                    phone,\r\n                                    birth,\r\n                                    gender,\r\n                                    address\r\n                                }\r\n                            }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.update = (data: { blocked: boolean; id: number }) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                            updateUserbyId(id: ${data.id}, blocked: ${data.blocked}) {\r\n                                blocked\r\n                            }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.delete = (data: string[]) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                            deleteUsers( ids: [${data.join(', ')}] )\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n    /**\r\n     * Watches APIs\r\n     * @param {}\r\n     */\r\n    watches() {\r\n        var endpoints: {\r\n            index: Function;\r\n            search: Function;\r\n            add: Function;\r\n            update: Function;\r\n            updateStatus: Function;\r\n            updateCertified: Function;\r\n            setFeatured: Function;\r\n            delete: Function;\r\n        } = {\r\n            index: Function,\r\n            search: Function,\r\n            add: Function,\r\n            update: Function,\r\n            updateStatus: Function,\r\n            updateCertified: Function,\r\n            setFeatured: Function,\r\n            delete: Function,\r\n        };\r\n\r\n        endpoints.index = (data: pagination) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                            getProducts(limit: ${data.limit}, offset: ${data.offset}) {\r\n                                total,\r\n                                results {\r\n                                    id,\r\n                                    name,\r\n                                    model,\r\n                                    description,\r\n                                    condition,\r\n                                    location,\r\n                                    featured,\r\n                                    confirmed,\r\n                                    certified,\r\n                                    images {\r\n                                        url\r\n                                    },\r\n                                    delivery,\r\n                                    price,\r\n                                    production_year,\r\n                                    case_material,\r\n                                    movement,\r\n                                    bracelet_material,\r\n                                    gender,\r\n                                    brand_id,\r\n                                    calibar,\r\n                                    base_calibar,\r\n                                    power_reserve,\r\n                                    jewels,\r\n                                    case_diameter,\r\n                                    water_resistance,\r\n                                    bezel_material,\r\n                                    crystal,\r\n                                    dial,\r\n                                    dial_numbers,\r\n                                    bracelet_color,\r\n                                    clasp,\r\n                                    clasp_material\r\n                                }\r\n                            }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.search = (keyword: string) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                            searchProducts(brand: \"${keyword}\") {\r\n                                id,\r\n                                name,\r\n                                model,\r\n                                description,\r\n                                condition,\r\n                                location,\r\n                                featured,\r\n                                confirmed,\r\n                                certified,\r\n                                images {\r\n                                    url\r\n                                },\r\n                                delivery,\r\n                                price,\r\n                                production_year,\r\n                                case_material,\r\n                                movement,\r\n                                bracelet_material,\r\n                                gender,\r\n                                brand_id,\r\n                                calibar,\r\n                                base_calibar,\r\n                                power_reserve,\r\n                                jewels,\r\n                                case_diameter,\r\n                                water_resistance,\r\n                                bezel_material,\r\n                                crystal,\r\n                                dial,\r\n                                dial_numbers,\r\n                                bracelet_color,\r\n                                clasp,\r\n                                clasp_material\r\n                            }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.add = (data: addWatchFields) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                        addProduct(\r\n                            clasp_material: \"${data.clasp_material}\",\r\n                            clasp: \"${data.clasp}\",\r\n                            bracelet_color: \"${data.bracelet_color}\",\r\n                            dial_numbers: \"${data.dial_numbers}\",\r\n                            dial: \"${data.dial}\",\r\n                            crystal: \"${data.crystal}\",\r\n                            bezel_material: \"${data.bezel_material}\",\r\n                            water_resistance: ${Number(data.water_resistance)},\r\n                            case_diameter: ${Number(data.case_diameter)},\r\n                            jewels: ${Number(data.jewels)},\r\n                            power_reserve: ${Number(data.power_reserve)},\r\n                            base_calibar: \"${data.base_calibar}\",\r\n                            calibar: \"${data.calibar}\",\r\n                            gender: \"${data.gender}\",\r\n                            production_year: ${Number(data.production_year)},\r\n                            bracelet_material: \"${data.bracelet_material}\",\r\n                            case_material: \"${data.case_diameter}\",\r\n                            movement: \"${data.movement}\",\r\n                            location: \"${data.location}\",\r\n                            description: \"${data.description}\",\r\n                            condition: \"${data.condition}\",\r\n                            delivery: \"${data.delivery}\",\r\n                            price: ${Number(data.price)},\r\n                            model: \"${data.model}\",\r\n                            brand: \"${data.brand}\"\r\n                        ) { id }\r\n                    }`,\r\n                },\r\n            });\r\n\r\n        endpoints.update = (data: addWatchFields, id: string) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                            updateProduct(\r\n                                id: \"${id}\",\r\n                                clasp_material: \"${data.clasp_material}\",\r\n                                clasp: \"${data.clasp}\",\r\n                                bracelet_color: \"${data.bracelet_color}\",\r\n                                dial_numbers: \"${data.dial_numbers}\",\r\n                                dial: \"${data.dial}\",\r\n                                crystal: \"${data.crystal}\",\r\n                                bezel_material: \"${data.bezel_material}\",\r\n                                water_resistance: ${Number(\r\n                        data.water_resistance,\r\n                    )},\r\n                                case_diameter: ${Number(data.case_diameter)},\r\n                                jewels: ${Number(data.jewels)},\r\n                                power_reserve: ${Number(data.power_reserve)},\r\n                                base_calibar: \"${data.base_calibar}\",\r\n                                calibar: \"${data.calibar}\",\r\n                                gender: \"${data.gender}\",\r\n                                production_year: ${Number(\r\n                        data.production_year,\r\n                    )},\r\n                                bracelet_material: \"${data.bracelet_material}\",\r\n                                case_material: \"${data.case_diameter}\",\r\n                                movement: \"${data.movement}\",\r\n                                location: \"${data.location}\",\r\n                                description: \"${data.description}\",\r\n                                condition: \"${data.condition}\",\r\n                                delivery: \"${data.delivery}\",\r\n                                price: ${Number(data.price)},\r\n                                model: \"${data.model}\",\r\n                                brand: \"${data.brand}\"\r\n                            ) { id }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.updateStatus = (data: { confirmed: boolean; id: string }) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                            updateProduct(id: \"${data.id}\", confirmed: ${data.confirmed}) {\r\n                                confirmed\r\n                            }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.updateCertified = (data: { certified: boolean; id: string }) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                    fulfillCertificate(id: ${data.id})\r\n                }`,\r\n                },\r\n            });\r\n\r\n        endpoints.setFeatured = (data: { featured: boolean; id: string }) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                            updateProduct(id: \"${data.id}\", featured: ${data.featured}) {\r\n                                featured\r\n                            }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.delete = (data: string[]) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                            deleteProducts( ids: [${data.join(', ')}] )\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n    /**\r\n     * Offers APIs\r\n     * @param {}\r\n     */\r\n    offers() {\r\n        var endpoints: { index: Function; approve: Function } = {\r\n            index: Function,\r\n            approve: Function,\r\n        };\r\n\r\n        endpoints.index = (data: pagination) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                         getOffers {\r\n                            id,\r\n                            username,\r\n                            first_name,\r\n                            last_name,\r\n                            email,\r\n                            phone,\r\n                            birth,\r\n                            gender,\r\n                            address,\r\n                            offers {\r\n                                    id,\r\n                                    name,\r\n                                    model,\r\n                                    description,\r\n                                    condition,\r\n                                    location,\r\n                                    featured,\r\n                                    confirmed,\r\n                                    delivery,\r\n                                    price,\r\n                                    proposed_price,\r\n                                    production_year,\r\n                                    case_material,\r\n                                    movement,\r\n                                    bracelet_material,\r\n                                    gender,\r\n                                    brand_id,\r\n                                    calibar,\r\n                                    base_calibar,\r\n                                    power_reserve,\r\n                                    jewels,\r\n                                    case_diameter,\r\n                                    water_resistance,\r\n                                    bezel_material,\r\n                                    crystal,\r\n                                    dial,\r\n                                    dial_numbers,\r\n                                    bracelet_color,\r\n                                    clasp,\r\n                                    clasp_material\r\n                        }\r\n                    }\r\n                }`,\r\n                },\r\n            });\r\n\r\n        endpoints.approve = (approved: boolean, watchId: number, id: number) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                    approveOffer( approved: ${approved}, watchId: ${watchId}, id: ${id}) \r\n                  }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n    /**\r\n     * Orders APIs\r\n     * @param {}\r\n     */\r\n    orders() {\r\n        var endpoints: { index: Function; approve: Function } = {\r\n            index: Function,\r\n            approve: Function,\r\n        };\r\n\r\n        endpoints.index = (data: pagination) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                         getOrders {\r\n                            id,\r\n                            username,\r\n                            first_name,\r\n                            last_name,\r\n                            email,\r\n                            phone,\r\n                            birth,\r\n                            gender,\r\n                            address,\r\n                            orders {\r\n                                    id,\r\n                                    name,\r\n                                    model,\r\n                                    description,\r\n                                    condition,\r\n                                    location,\r\n                                    featured,\r\n                                    confirmed,\r\n                                    delivery,\r\n                                    price,\r\n                                    production_year,\r\n                                    case_material,\r\n                                    movement,\r\n                                    bracelet_material,\r\n                                    gender,\r\n                                    brand_id,\r\n                                    calibar,\r\n                                    base_calibar,\r\n                                    power_reserve,\r\n                                    jewels,\r\n                                    case_diameter,\r\n                                    water_resistance,\r\n                                    bezel_material,\r\n                                    crystal,\r\n                                    dial,\r\n                                    dial_numbers,\r\n                                    bracelet_color,\r\n                                    clasp,\r\n                                    clasp_material\r\n                        }\r\n                    }\r\n                }`,\r\n                },\r\n            });\r\n\r\n        endpoints.approve = (approved: boolean, watchId: number) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                    approveOrder( approved: ${approved}, watchId: ${watchId}) \r\n                  }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n    /**\r\n     * Certificates APIs\r\n     * @param {}\r\n     */\r\n    certificates() {\r\n        var endpoints: { index: Function; fulfillCertificate: Function } = {\r\n            index: Function,\r\n            fulfillCertificate: Function,\r\n        };\r\n\r\n        endpoints.index = () =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                            getCertificates {\r\n                                id,\r\n                                fulfilled,\r\n                                user {\r\n                                    id,\r\n                                    username,\r\n                                    first_name,\r\n                                    last_name,\r\n                                    email,\r\n                                    confirmed,\r\n                                    phone,\r\n                                    birth,\r\n                                    gender,\r\n                                    address\r\n                                }\r\n                            }\r\n                  }`,\r\n                },\r\n            });\r\n\r\n        endpoints.fulfillCertificate = (id: number) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                    fulfillCertificate(id: ${id})\r\n                  }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n    /**\r\n     * Brands APIs\r\n     * @param {}\r\n     */\r\n    brands() {\r\n        var endpoints: {\r\n            index: Function;\r\n            add: Function;\r\n            update: Function;\r\n            delete: Function;\r\n        } = { index: Function, add: Function, update: Function, delete: Function };\r\n\r\n        endpoints.index = (data: pagination) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `query {\r\n                            getBrands(limit: ${data.limit}, offset: ${data.offset}) {\r\n                                total,\r\n                                results {\r\n                                    id,\r\n                                    name,\r\n                                }\r\n                            }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.add = (name: string) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                        createBrand(\r\n                            name: \"${name}\",\r\n                        ) { id }\r\n                    }`,\r\n                },\r\n            });\r\n\r\n        endpoints.update = (name: string, id: string) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                            updateBrand(\r\n                                id: \"${id}\",\r\n                                name: \"${name}\",\r\n                            ) { id }\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        endpoints.delete = (data: string[]) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                            deleteBrands( ids: [${data.join(', ')}] )\r\n                        }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n\r\n    notifications() {\r\n        var endpoints: {\r\n            send: Function;\r\n        } = { send: Function };\r\n\r\n        endpoints.send = (data: { body: String; title: string; }) =>\r\n            axios({\r\n                url: this.url,\r\n                method: 'post',\r\n                data: {\r\n                    query: `mutation {\r\n                                sendNotification(body: \"${data.body}\", title: \"${data.title}\")\r\n                            }`,\r\n                },\r\n            });\r\n\r\n        return endpoints;\r\n    }\r\n    \r\n}\r\n\r\nexport default API;","E:\\Self Projects\\timepiece\\src\\components\\Modal\\Modal.tsx",["261","262"],"import React, { useEffect, useState } from 'react'\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\n// Custom scrollbar\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport './Modal.css'\r\n\r\ninterface ModalProps {\r\n    open: boolean,\r\n    toggle: Function,\r\n    children?: any\r\n}\r\n\r\nexport default (props: ModalProps) => {\r\n\r\n    const [out, setOut] = useState<boolean>(false)\r\n    const [dasharray, setDasharray] = useState<number>(0)\r\n\r\n    // Media query\r\n    const isMobile = useMediaQuery({ query: '(max-width: 768px)' })\r\n\r\n    const hide = () => {\r\n        setOut(true);\r\n        setTimeout(() => {\r\n            props.toggle()\r\n            setOut(false);\r\n        }, 300);\r\n    }\r\n\r\n    const handleEsc = (e: KeyboardEvent) => {\r\n        if (e.key === 'Escape')\r\n            hide()\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', handleEsc);\r\n        return () => {\r\n            // unsubscribe event\r\n            window.removeEventListener('keydown', handleEsc);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            { props.open ?\r\n                <div id=\"modal-container\" className={out ? \"out\" : \"\"} onClick={hide}>\r\n                    <div className=\"modal-background\">\r\n                        <div ref={(component: HTMLDivElement) => { if (component) setDasharray(component.offsetWidth * 2 + component.offsetHeight * 2) }} className=\"modal\" onClick={(e: React.MouseEvent<HTMLDivElement>) => e.stopPropagation()}>\r\n                            <Scrollbars\r\n                                className=\"modal-scroller\"\r\n                                autoHeight\r\n                                autoHeightMin=\"100%\" autoHeightMax={isMobile ? \"100vh\" : \"90vh\"}\r\n                                autoHide\r\n                                renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" style={{ display: \"none\" }} />}\r\n                                renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" style={{ display: \"none\" }} />} >\r\n                                <div className=\"modal-content\">\r\n                                    <i className=\"icon-close\" style={{ display: \"none\" }} onClick={hide} />\r\n                                    {props.children}\r\n                                </div>\r\n                                {dasharray ?\r\n                                    <svg className=\"modal-svg\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" preserveAspectRatio=\"none\">\r\n                                        <rect style={{ strokeDasharray: dasharray, strokeDashoffset: dasharray }} x=\"0\" y=\"0\" fill=\"none\" width=\"226\" height=\"162\" rx=\"3\" ry=\"3\"></rect>\r\n                                    </svg> : \"\"}\r\n                            </Scrollbars>\r\n                        </div>\r\n                    </div>\r\n                    <style>{`\r\n                        @keyframes sketchIn {\r\n                            0% {\r\n                                stroke-dashoffset: ${dasharray};\r\n                            }\r\n                            100% {\r\n                                stroke-dashoffset: 0;\r\n                            }\r\n                        }\r\n                        \r\n                        @keyframes sketchOut {\r\n                            0% {\r\n                                stroke-dashoffset: 0;\r\n                            }\r\n                            100% {\r\n                                stroke-dashoffset: ${dasharray};\r\n                            }\r\n                        }\r\n                        \r\n                        @keyframes sketchInDark {\r\n                            0% {\r\n                                stroke-dashoffset: ${dasharray};\r\n                            }\r\n                            100% {\r\n                                stroke-dashoffset: 0;\r\n                                stroke: #1a2029;\r\n                            }\r\n                        }\r\n                        \r\n                        @keyframes sketchOutDark {\r\n                            0% {\r\n                                stroke-dashoffset: 0;\r\n                                stroke: #1a2029;\r\n                            }\r\n                            100% {\r\n                                stroke-dashoffset: ${dasharray};\r\n                            }\r\n                        }\r\n                    `}</style>\r\n                </div> : \"\"}\r\n        </>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\components\\Alerts\\Alerts.tsx",["263","264","265"],"import React, { useState } from 'react'\r\nimport { uid } from '../../services/hoc/helpers'\r\n\r\nimport './Alerts.css'\r\n\r\ninterface StaticAlertProps {\r\n    show: boolean,\r\n    type: \"warning\" | \"error\" | \"success\" | \"info\",\r\n    children?: any\r\n}\r\n\r\nexport const StaticAlert = (props: StaticAlertProps) => {\r\n\r\n    const [dasharray, setDasharray] = useState<number>(0)\r\n    const id = uid(\"alert\")\r\n\r\n    return(\r\n        <>\r\n        {props.show ?\r\n        <div className={\"alert \" + props.type }>\r\n            <div className=\"alert-content\">\r\n                {props.children}\r\n            </div>\r\n        </div> : \"\"\r\n        }\r\n        </>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\components\\Table\\Table.tsx",[],"E:\\Self Projects\\timepiece\\src\\components\\TableActionBar\\TableActionBar.tsx",["266"],"import React, { useState } from 'react'\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\nimport './TableActionBar.css'\r\n\r\ninterface ActionBarProps {\r\n    title?: string,\r\n    search?: Function,\r\n    delete?: Function,\r\n    add?: Function,\r\n    addText?: string,\r\n    showDelete?: boolean,\r\n    showFilter?: boolean\r\n}\r\n\r\nexport default (props: ActionBarProps) => {\r\n\r\n    const t = useTranslation()\r\n\r\n    const [searchValue, setSearchValue] = useState<string>(\"\")\r\n\r\n    return(\r\n        <div className=\"action-bar\">\r\n            { props.title ? <h2>{props.title}</h2> : \"\" }\r\n            { props.search ?\r\n            <div className=\"search\">\r\n                <input type=\"text\" value={searchValue} placeholder={t('search')}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchValue(e.target.value)}\r\n                onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) => {\r\n                    if(e.key === \"Enter\" && props.search)\r\n                        props.search(e.currentTarget.value)\r\n                }} />\r\n                { searchValue === \"\" ?\r\n                <i className=\"icon-search\" /> :\r\n                <i className=\"icon-close\" onClick={() => {\r\n                    setSearchValue(\"\")\r\n                    if(props.search)\r\n                        props.search(\"\")\r\n                }} /> }\r\n            </div> : \"\" }\r\n            <div className=\"actions\">\r\n                { props.showDelete ? <button className=\"delete\" onClick={() => { if(props.delete) props.delete() }}><i className=\"icon-delete\"></i></button> : \"\" }\r\n                { props.showFilter === false ?  \"\" : <button className=\"filter\"><i className=\"icon-filter-2\"></i> {t(\"filter\")}</button> }\r\n                { props.add ? <button className=\"add\" onClick={() => { if(props.add) props.add() }}><i className=\"icon-plus\"></i> {props.addText}</button> : \"\" }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Dealers\\Dealers.tsx",["267","268","269","270","271","272","273","274","275"],"import React, { useState } from 'react'\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { dealer, dealersSlice, dealersState } from './DealersSlice'\r\n\r\n// Models\r\nimport { User } from '../../services/models/models'\r\n\r\n// API\r\nimport API from '../../services/api/api'\r\n\r\n// Mapbox map\r\nimport ReactMapboxGl, { Layer, Feature, Marker } from 'react-mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { setRTLTextPlugin } from 'mapbox-gl';\r\nimport marker from '../../assets/images/vector/marker.png'\r\n\r\n// Components\r\nimport TableActionBar from '../../components/TableActionBar/TableActionBar'\r\nimport { DashboardTable } from '../../components/Table/Table'\r\nimport { EllipsisLoader, WhiteboxLoader } from '../../components/Loader/Loader'\r\nimport { SelectField } from '../../components/FormElements/FormElements'\r\nimport DetailsModal from '../../components/DetailsModal/DetailsModal'\r\n\r\nsetRTLTextPlugin(\r\n    \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js\",\r\n    () => { },\r\n    true\r\n);\r\n\r\nexport default () => {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state = useSelector((state: { dealers: dealersState }) => state.dealers)\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    // Status options\r\n    const status_options = [\r\n        { value: false, label: t(\"approved\") },\r\n        { value: true, label: t(\"pending\") }\r\n    ]\r\n\r\n    // Map\r\n    const Map = ReactMapboxGl({\r\n        accessToken:\r\n            'pk.eyJ1IjoibWFqZHNoYW1tYSIsImEiOiJja3E1Z2dpeXkxM2c2MnBvMHExdzNnZ2xxIn0.8WIFOZkv9ivooX6OzFMvzQ',\r\n        attributionControl: true,\r\n        scrollZoom: true\r\n    });\r\n\r\n    // Search\r\n    const search = () => { }\r\n\r\n    // Get default status value\r\n    const getDefaultStatusValue = (confirmed: boolean) => {\r\n        if (!confirmed) return status_options[0];\r\n        return status_options[1];\r\n    };\r\n\r\n    // Change dealer status\r\n    const changeStatus = (selected: boolean, id: string) => {\r\n        dispatch(dealersSlice.actions.addToLoadingStatuses(id))\r\n        ENDPOINTS.users().update({ id: Number(id), blocked: selected })\r\n            .then(() => {\r\n                dispatch(dealersSlice.actions.removeFromLoadingStatuses(id))\r\n                dispatch(dealersSlice.actions.setBlocked({ id: id, blocked: selected }))\r\n            })\r\n    }\r\n\r\n    // Fetch Data\r\n    const fetchData = (page: number, page_size: number = 10) => {\r\n\r\n        dispatch(dealersSlice.actions.setIsFetching(true))\r\n\r\n        ENDPOINTS.dealers().index({ limit: page_size, offset: page - 1 })\r\n            .then((response: any) => {\r\n\r\n                // Has more\r\n                if (response.data?.data?.getUsers?.total <= page * page_size)\r\n                    dispatch(dealersSlice.actions.setHasMore(false))\r\n\r\n                let dealers: dealer[] = []\r\n\r\n                response.data?.data?.getUsers?.results?.map((item: any) => {\r\n                    dealers.push({\r\n                        id: String(item.id),\r\n                        username: String(item.username),\r\n                        name: String((!item.first_name && !item.last_name) ? \"N/A\" : item.first_name + \" \" + item.last_name),\r\n                        email: String(item.email),\r\n                        email_status: Boolean(item.confirmed),\r\n                        status: Boolean(item.blocked),\r\n                        phone: String(item.phone ? item.phone : \"N/A\"),\r\n                        birth: String(item.birth ? item.birth : \"N/A\"),\r\n                        gender: String(item.gender ? item.gender : \"N/A\"),\r\n                        address: String(item.address ? item.address : \"N/A\")\r\n                    })\r\n                })\r\n\r\n                dispatch(dealersSlice.actions.addDealers(dealers))\r\n                dispatch(dealersSlice.actions.setIsLoaded(true))\r\n                dispatch(dealersSlice.actions.setIsFetching(false))\r\n            })\r\n\r\n    }\r\n\r\n    interface tableDataType { [key: string]: { [key: string]: any } }\r\n    const generateData: () => tableDataType = () => {\r\n        let data: tableDataType = {}\r\n        state.dealers.map((item, index) => {\r\n            data[item.id] = {\r\n                username: item.username,\r\n                name: item.name,\r\n                email: <>{item.email} {item.email_status ? <span style={{ color: \"#2ecc71\" }}>( {t(\"confirmed\")} )</span> : <span style={{ color: \"#e67e22\" }}>( {t(\"pending\")} )</span>}</>,\r\n                status: <div onClick={(e: React.MouseEvent<HTMLDivElement>) => e.stopPropagation()}>\r\n                    <SelectField isLoading={state.loadingStatuses.includes(item.id)} defaultValue={getDefaultStatusValue(item.status)} onChange={(selected: { value: boolean }) => changeStatus(selected.value, item.id)} options={status_options} />\r\n                </div>,\r\n                actions: <div className=\"show-on-hover\">\r\n                    <i className=\"icon-info\" onClick={(e: React.MouseEvent<HTMLLIElement>) => showDetails(e, item.id)} />\r\n                    <i className=\"icon-delete\" onClick={(e: React.MouseEvent<HTMLLIElement>) => {\r\n                        e.stopPropagation()\r\n                        remove(item.id)\r\n                    }} />\r\n                </div>\r\n            }\r\n        })\r\n\r\n        return data\r\n    }\r\n\r\n    // Details Modal\r\n    const showDetails = (e: React.MouseEvent<HTMLLIElement>, id: string) => {\r\n        e.stopPropagation();\r\n        dispatch(dealersSlice.actions.setDetailsIsOpen(true))\r\n        dispatch(dealersSlice.actions.setActiveDealer(id))\r\n    }\r\n\r\n    const getAddress = (address: string) => {\r\n        if (!address)\r\n            return \"N/A\"\r\n        let address_object = JSON.parse(address)\r\n        if (address_object.length === 0)\r\n            return \"N/A\"\r\n        return (\r\n            <div>\r\n                {/* <Map\r\n                    style=\"mapbox://styles/mapbox/light-v10\"\r\n                    containerStyle={{\r\n                        height: '300px',\r\n                        width: '500px'\r\n                    }}\r\n                    center={[address_object[0].coordinates.lng, address_object[0].coordinates.lat]}\r\n                    zoom={[15]}\r\n                >\r\n                    <Marker\r\n                        coordinates={[address_object[0].coordinates.lng, address_object[0].coordinates.lat]}\r\n                        anchor=\"bottom\" style={{ pointerEvents: 'none' }}>\r\n                        <img src={marker} style={{ maxWidth: 30, pointerEvents: 'none' }} />\r\n                    </Marker>\r\n                </Map> */}\r\n                <iframe style={{ width: \"100%\", minHeight: 300, border: 'none' }} src={`https://maps.google.com/maps?q=${address_object[0].coordinates.lat},${address_object[0].coordinates.lng}&t=&z=15&ie=UTF8&iwloc=&output=embed`} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const getActiveDealer = (): { [key: string]: any } => {\r\n        let activeDealer = state.dealers[state.dealers.findIndex(dealer => dealer.id === state.activeDealer)]\r\n\r\n        if (!activeDealer)\r\n            return {}\r\n\r\n        let dealer: User = {\r\n            username: activeDealer.username,\r\n            name: activeDealer.name,\r\n            email: activeDealer.email,\r\n            phone: activeDealer.phone,\r\n            birth: activeDealer.birth,\r\n            gender: activeDealer.gender,\r\n            address: getAddress(activeDealer.address)\r\n        }\r\n        return dealer\r\n    }\r\n\r\n\r\n    // Toggle Selected id\r\n    const [selectedIds, setSelectedIds] = useState<string[]>([]);\r\n    const toggleSelectedId = (id: string) => {\r\n        let index = selectedIds.findIndex(selectedId => selectedId === id)\r\n        if (index !== -1) {\r\n            setSelectedIds(selectedIds.filter(selectedId => selectedId !== id))\r\n        } else\r\n            setSelectedIds([...selectedIds, id])\r\n    }\r\n\r\n    // Delete\r\n    const remove = (id?: string) => {\r\n\r\n        dispatch(dealersSlice.actions.setIsLoading(true))\r\n\r\n        ENDPOINTS.users().delete(id ? [id] : selectedIds)\r\n            .then(() => {\r\n                dispatch(dealersSlice.actions.setIsLoading(false))\r\n                dispatch(dealersSlice.actions.deleteDealers(id ? [id] : selectedIds))\r\n                if (!id) setSelectedIds([])\r\n            })\r\n\r\n    }\r\n\r\n    // First fetch\r\n    if (!state.isLoaded && !state.isFetching)\r\n        fetchData(1)\r\n\r\n    return (\r\n        <>\r\n            {state.isLoaded ?\r\n                <>\r\n                    {state.isLoading ? <WhiteboxLoader /> : \"\"}\r\n\r\n                    <TableActionBar\r\n                        title={t(\"dealers\")}\r\n                        search={search}\r\n                        showFilter={false}\r\n                        showDelete={selectedIds.length > 0}\r\n                        delete={remove}\r\n                    />\r\n\r\n                    <DashboardTable\r\n                        header={[t(\"username\"), t(\"name\"), t(\"email\"), t(\"status\"), \"\"]}\r\n                        body={generateData()}\r\n                        onSelect={toggleSelectedId}\r\n                        hasMore={state.hasMore}\r\n                        loadMore={fetchData}\r\n                    />\r\n\r\n                    <DetailsModal isOpen={state.detailsIsOpen} toggle={() => dispatch(dealersSlice.actions.setDetailsIsOpen(false))} data={getActiveDealer()} title={t(\"dealer_details\")} />\r\n\r\n                </> : <div className=\"center\"><EllipsisLoader /></div>}\r\n        </>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\LoginForm\\LoginFormSlice.ts",[],"E:\\Self Projects\\timepiece\\src\\containers\\Dealers\\DealersSlice.ts",["276","277","278"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n// Models\r\nexport interface dealer {\r\n    id: string,\r\n    username: string,\r\n    name: string,\r\n    email: string,\r\n    email_status: boolean,\r\n    status: boolean,\r\n    phone: string,\r\n    birth: string,\r\n    gender: string,\r\n    address: string\r\n}\r\n\r\n// Dealers state\r\nexport interface dealersState {\r\n    isLoaded: boolean, // First load\r\n    isLoading: boolean, // On filtering laoder\r\n    isFetching: boolean,\r\n    hasMore: boolean,\r\n    dealers: dealer[],\r\n    detailsIsOpen: boolean,\r\n    loadingStatuses: string[],\r\n    activeDealer: string\r\n}\r\n\r\nconst initialDealersState: dealersState = {\r\n    isLoaded: false,\r\n    isLoading: false,\r\n    isFetching: false,\r\n    hasMore: true,\r\n    dealers: [],\r\n    detailsIsOpen: false,\r\n    loadingStatuses: [],\r\n    activeDealer: \"\"\r\n}\r\n\r\n// Dealers slice\r\nexport const dealersSlice = createSlice({\r\n    name: 'dealers',\r\n    initialState: initialDealersState,\r\n    reducers: {\r\n        setIsLoaded: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoaded = payload\r\n        },\r\n        setIsLoading: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoading = payload\r\n        },\r\n        setIsFetching: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isFetching = payload\r\n        },\r\n        setHasMore: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.hasMore = payload\r\n        },\r\n        addDealers: ( state, {payload}: PayloadAction<dealer[]> ) => {\r\n            state.dealers = [ ...state.dealers, ...payload ]\r\n        },\r\n        deleteDealers: ( state, {payload}: PayloadAction<string[]> ) => {\r\n            payload.map(id => {\r\n                let index = state.dealers.findIndex( dealer => dealer.id === id )\r\n                if( index != -1 )\r\n                    state.dealers.splice( index, 1 )\r\n            })\r\n        },\r\n        setDetailsIsOpen: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.detailsIsOpen = payload\r\n        },\r\n        addToLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.loadingStatuses.push(payload)\r\n        },\r\n        removeFromLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            let index = state.loadingStatuses.findIndex( status => status === payload )\r\n            if( index != -1 )\r\n                state.loadingStatuses.splice( index, 1 )\r\n        },\r\n        setActiveDealer: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.activeDealer = payload\r\n        },\r\n        setBlocked: ( state, {payload}: PayloadAction<{ id: string, blocked: boolean }> ) => {\r\n            let index = state.dealers.findIndex( dealer => dealer.id === payload.id )\r\n            if( index !== -1 )\r\n                state.dealers[index].status = payload.blocked\r\n        },\r\n    }\r\n})","E:\\Self Projects\\timepiece\\src\\containers\\Users\\UsersSlice.ts",["279","280","281"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n// Models\r\nexport interface user {\r\n    id: string,\r\n    username: string,\r\n    name: string,\r\n    email: string,\r\n    email_status: boolean,\r\n    status: boolean,\r\n    phone: string,\r\n    birth: string,\r\n    gender: string,\r\n    address: string\r\n}\r\n\r\n// Users state\r\nexport interface usersState {\r\n    isLoaded: boolean, // First load\r\n    isLoading: boolean, // On filtering laoder\r\n    isFetching: boolean,\r\n    hasMore: boolean,\r\n    users: user[],\r\n    detailsIsOpen: boolean,\r\n    loadingStatuses: string[],\r\n    activeUser: string\r\n}\r\n\r\nconst initialUsersState: usersState = {\r\n    isLoaded: false,\r\n    isLoading: false,\r\n    isFetching: false,\r\n    hasMore: true,\r\n    users: [],\r\n    detailsIsOpen: false,\r\n    loadingStatuses: [],\r\n    activeUser: \"\"\r\n}\r\n\r\n// Users slice\r\nexport const usersSlice = createSlice({\r\n    name: 'users',\r\n    initialState: initialUsersState,\r\n    reducers: {\r\n        setIsLoaded: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoaded = payload\r\n        },\r\n        setIsLoading: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoading = payload\r\n        },\r\n        setIsFetching: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isFetching = payload\r\n        },        \r\n        setHasMore: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.hasMore = payload\r\n        },\r\n        addUsers: ( state, {payload}: PayloadAction<user[]> ) => {\r\n            state.users = [ ...state.users, ...payload ]\r\n        },\r\n        deleteUsers: ( state, {payload}: PayloadAction<string[]> ) => {\r\n            payload.map(id => {\r\n                let index = state.users.findIndex( user => user.id === id )\r\n                if( index != -1 )\r\n                    state.users.splice( index, 1 )\r\n            })\r\n        },\r\n        setDetailsIsOpen: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.detailsIsOpen = payload\r\n        },\r\n        addToLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.loadingStatuses.push(payload)\r\n        },\r\n        removeFromLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            let index = state.loadingStatuses.findIndex( status => status === payload )\r\n            if( index != -1 )\r\n                state.loadingStatuses.splice( index, 1 )\r\n        },\r\n        setActiveUser: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.activeUser = payload\r\n        },\r\n    }\r\n})","E:\\Self Projects\\timepiece\\src\\containers\\Users\\Users.tsx",["282","283","284","285","286","287","288","289","290","291","292","293","294"],"import React, { useState } from 'react'\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { user, usersSlice, usersState } from './UsersSlice'\r\n\r\n// Models\r\nimport { User } from '../../services/models/models'\r\n\r\n// API\r\nimport API from '../../services/api/api'\r\n\r\n// Mapbox map\r\nimport ReactMapboxGl, { Layer, Feature, Marker } from 'react-mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { setRTLTextPlugin } from 'mapbox-gl';\r\nimport marker from '../../assets/images/vector/marker.png'\r\n\r\n// Components\r\nimport TableActionBar from '../../components/TableActionBar/TableActionBar'\r\nimport { DashboardTable } from '../../components/Table/Table'\r\nimport { EllipsisLoader, WhiteboxLoader } from '../../components/Loader/Loader'\r\nimport { SelectField } from '../../components/FormElements/FormElements'\r\nimport DetailsModal from '../../components/DetailsModal/DetailsModal'\r\nimport { useEffect } from 'react'\r\n\r\nexport default () => {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state = useSelector( ( state: { users: usersState } ) => state.users )\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    // Status options\r\n    const status_options = [\r\n        { value: false, label: t(\"approved\") },\r\n        { value: true, label: t(\"pending\") }\r\n    ]\r\n\r\n    // Map\r\n    const Map = ReactMapboxGl({\r\n        accessToken:\r\n            'pk.eyJ1IjoibWFqZHNoYW1tYSIsImEiOiJja3E1Z2dpeXkxM2c2MnBvMHExdzNnZ2xxIn0.8WIFOZkv9ivooX6OzFMvzQ',\r\n        attributionControl: true,\r\n        scrollZoom: true\r\n    });\r\n\r\n    // Search\r\n    const search = () => {}\r\n\r\n    // Get default status value\r\n    const getDefaultStatusValue = (confirmed: boolean) => {\r\n        if (confirmed) return status_options[0];\r\n        else return status_options[1];\r\n    };\r\n\r\n    // Fetch Data\r\n    const fetchData = (page: number, page_size: number = 10) => {\r\n        \r\n        dispatch( usersSlice.actions.setIsFetching(true) )\r\n\r\n        ENDPOINTS.users().index( { limit: page_size, offset: page - 1 } )\r\n        .then( (response: any) => {\r\n            \r\n            // Has more\r\n            if( response.data?.data?.getUsers?.total <= page * page_size )\r\n                dispatch( usersSlice.actions.setHasMore(false) )\r\n            \r\n            let users: user[] = []\r\n\r\n            response.data?.data?.getUsers?.results?.map( (item: any) => {\r\n                users.push({\r\n                    id: String(item.id),\r\n                    username: String(item.username),\r\n                    name: String(( !item.first_name && !item.last_name ) ? \"N/A\" : item.first_name + \" \" + item.last_name),\r\n                    email: String(item.email),\r\n                    email_status: Boolean(item.confirmed),\r\n                    status: Boolean(item.blocked),\r\n                    phone: String(item.phone ? item.phone : \"N/A\"),\r\n                    birth: String(item.birth ? item.birth : \"N/A\"),\r\n                    gender: String(item.gender ? item.gender : \"N/A\"),\r\n                    address: String(item.address ? item.address : \"N/A\")\r\n                })\r\n            })\r\n\r\n            dispatch( usersSlice.actions.addUsers(users) )\r\n            dispatch( usersSlice.actions.setIsLoaded(true) )\r\n            dispatch( usersSlice.actions.setIsFetching(false) )\r\n        })\r\n\r\n    }\r\n\r\n    interface tableDataType { [key: string]: { [key: string]: any } }\r\n    const generateData: () => tableDataType = () => {\r\n        let data: tableDataType = {}\r\n        state.users.map( (item, index) => {\r\n            data[item.id] = {\r\n                username: item.username,\r\n                name: item.name,\r\n                email: <>{item.email} { item.email_status ? <span style={{ color: \"#2ecc71\" }}>( {t(\"confirmed\")} )</span> : <span style={{ color: \"#e67e22\" }}>( {t(\"pending\")} )</span> }</>,\r\n                phone: item.phone,\r\n                actions: <div className=\"show-on-hover\">\r\n                            <i className=\"icon-info\" onClick={(e: React.MouseEvent<HTMLLIElement>) => showDetails(e, item.id) } />\r\n                            <i className=\"icon-delete\" onClick={(e: React.MouseEvent<HTMLLIElement>) => {\r\n                                e.stopPropagation()\r\n                                remove(item.id)\r\n                            }} />\r\n\r\n                        </div>\r\n            }\r\n        })\r\n        return data\r\n    }\r\n\r\n    // Details Modal\r\n    const showDetails = (e: React.MouseEvent<HTMLLIElement>, id: string) => {\r\n        e.stopPropagation();\r\n        dispatch( usersSlice.actions.setDetailsIsOpen(true) )\r\n        dispatch( usersSlice.actions.setActiveUser(id) )\r\n    }\r\n\r\n    const getAddress = (address: string) => {\r\n        if (!address)\r\n            return \"N/A\"\r\n        let address_object = JSON.parse(address)\r\n        if (address_object.length === 0)\r\n            return \"N/A\"\r\n        return (\r\n            <div>\r\n                {/* <Map\r\n                    style=\"mapbox://styles/mapbox/light-v10\"\r\n                    containerStyle={{\r\n                        height: '300px',\r\n                        width: '500px'\r\n                    }}\r\n                    center={[address_object[0].coordinates.lng, address_object[0].coordinates.lat]}\r\n                    zoom={[15]}\r\n                >\r\n                    <Marker\r\n                        coordinates={[address_object[0].coordinates.lng, address_object[0].coordinates.lat]}\r\n                        anchor=\"bottom\" style={{ pointerEvents: 'none' }}>\r\n                        <img src={marker} style={{ maxWidth: 30, pointerEvents: 'none' }} />\r\n                    </Marker>\r\n                </Map> */}\r\n                <iframe style={{ width: \"100%\", minHeight: 300, border: 'none' }} src={`https://maps.google.com/maps?q=${address_object[0].coordinates.lat},${address_object[0].coordinates.lng}&t=&z=15&ie=UTF8&iwloc=&output=embed`} />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    const getActiveUser = (): { [key: string]: any } => {\r\n        let activeUser = state.users[state.users.findIndex(user => user.id === state.activeUser)]\r\n        \r\n        if(!activeUser)\r\n            return {}\r\n\r\n        let user: User = {\r\n            username: activeUser.username,\r\n            name: activeUser.name,\r\n            email: activeUser.email,\r\n            phone: activeUser.phone,\r\n            birth: activeUser.birth,\r\n            gender: activeUser.gender,\r\n            address: getAddress(activeUser.address)\r\n        }\r\n        return user\r\n    }\r\n\r\n\r\n    // Toggle Selected id\r\n    const [selectedIds, setSelectedIds] = useState<string[]>([]);\r\n    const toggleSelectedId = (id: string) => {\r\n        let index = selectedIds.findIndex(selectedId => selectedId === id)\r\n        if( index !== -1 ) {\r\n            setSelectedIds(selectedIds.filter(selectedId => selectedId !== id))\r\n        } else\r\n            setSelectedIds([...selectedIds, id])\r\n    }\r\n\r\n    // Delete\r\n    const remove = (id? :string) => {\r\n        \r\n        dispatch( usersSlice.actions.setIsLoading(true) )\r\n\r\n        ENDPOINTS.users().delete(id ? [id] : selectedIds)\r\n        .then(() => {\r\n            dispatch( usersSlice.actions.setIsLoading(false) )\r\n            dispatch( usersSlice.actions.deleteUsers(id ? [id] : selectedIds) )\r\n            if(!id) setSelectedIds([])\r\n        })\r\n\r\n    }\r\n\r\n\r\n    // First fetch\r\n    if( !state.isLoaded && !state.isFetching )\r\n        fetchData(1)\r\n\r\n    return(\r\n        <>\r\n            { state.isLoaded ?\r\n            <>\r\n                { state.isLoading ? <WhiteboxLoader /> : \"\"}\r\n                <TableActionBar\r\n                    title={t(\"users\")}\r\n                    search={search}\r\n                    showFilter={false}\r\n                    showDelete={selectedIds.length > 0}\r\n                    delete={remove}\r\n                    />\r\n                \r\n                <DashboardTable\r\n                    header={[ t(\"username\"), t(\"name\"), t(\"email\"), t(\"phone\"), \"\" ]}\r\n                    body={generateData()}\r\n                    onSelect={toggleSelectedId}\r\n                    hasMore={state.hasMore}\r\n                    loadMore={fetchData}\r\n                    />\r\n                \r\n                <DetailsModal isOpen={state.detailsIsOpen} toggle={() => dispatch( usersSlice.actions.setDetailsIsOpen(false) )} data={getActiveUser()} title={t(\"user_details\")} />\r\n            </> : <div className=\"center\"><EllipsisLoader /></div> }\r\n        </>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\WatchesSlice.ts",["295","296","297","298"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n// Models\r\nexport interface watch {\r\n    id: string,\r\n    name: string,\r\n    model: string,\r\n    description: string,\r\n    condition: string,\r\n    location: string,\r\n    featured: boolean,\r\n    confirmed: boolean,\r\n    certified: boolean,\r\n    images: string[],\r\n    delivery: string,\r\n    price: number,\r\n    production_year: number,\r\n    case_material: string,\r\n    movement: string,\r\n    bracelet_material: string,\r\n    gender: string,\r\n    calibar: string,\r\n    base_calibar: string,\r\n    power_reserve: number,\r\n    jewels: number,\r\n    case_diameter: number,\r\n    water_resistance: number,\r\n    bezel_material: string,\r\n    crystal: string,\r\n    dial: string,\r\n    dial_numbers: string,\r\n    bracelet_color: string,\r\n    clasp: string,\r\n    clasp_material: string,\r\n}\r\n\r\n// Watches state\r\nexport interface watchesState {\r\n    isLoaded: boolean, // First load\r\n    isLoading: boolean, // On filtering laoder\r\n    isFetching: boolean,\r\n    hasMore: boolean,\r\n    watches: watch[],\r\n    filteredWatches: watch[],\r\n    detailsIsOpen: boolean,\r\n    loadingStatuses: string[],\r\n    loadingCertified: string[],\r\n    activeWatch: string,\r\n    openAddModal: boolean\r\n}\r\n\r\nconst initialWatchesState: watchesState = {\r\n    isLoaded: false,\r\n    isLoading: false,\r\n    isFetching: false,\r\n    hasMore: true,\r\n    watches: [],\r\n    filteredWatches: [],\r\n    detailsIsOpen: false,\r\n    loadingStatuses: [],\r\n    loadingCertified: [],\r\n    activeWatch: \"\",\r\n    openAddModal: false\r\n}\r\n\r\n// Users slice\r\nexport const watchesSlice = createSlice({\r\n    name: 'watches',\r\n    initialState: initialWatchesState,\r\n    reducers: {\r\n        setIsLoaded: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoaded = payload\r\n        },\r\n        setIsLoading: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoading = payload\r\n        },\r\n        setIsFetching: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isFetching = payload\r\n        },\r\n        setHasMore: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.hasMore = payload\r\n        },\r\n        addWatches: ( state, {payload}: PayloadAction<watch[]> ) => {\r\n            state.watches = [ ...state.watches, ...payload ]\r\n        },\r\n        updateWatch: ( state, {payload}: PayloadAction<watch> ) => {\r\n            let index = state.watches.findIndex( watch => watch.id === payload.id )\r\n            if( index !== -1 )\r\n                state.watches[index] = payload\r\n            let filteredIndex = state.filteredWatches.findIndex( watch => watch.id === payload.id )\r\n            if( filteredIndex !== -1 )\r\n                state.filteredWatches[index] = payload\r\n        },\r\n        deleteWatches: ( state, {payload}: PayloadAction<string[]> ) => {\r\n            payload.map(id => {\r\n                let index = state.watches.findIndex( watch => watch.id === id )\r\n                if( index != -1 )\r\n                    state.watches.splice( index, 1 )\r\n                let filteredIndex = state.filteredWatches.findIndex( watch => watch.id === id )\r\n                if( filteredIndex !== -1 )\r\n                    state.filteredWatches.splice( index, 1 )\r\n            })\r\n        },\r\n        setFilteredWatches: ( state, {payload}: PayloadAction<watch[]> ) => {\r\n            state.filteredWatches = payload\r\n        },\r\n        setDetailsIsOpen: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.detailsIsOpen = payload\r\n        },\r\n        addToLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.loadingStatuses.push(payload)\r\n        },\r\n        removeFromLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            let index = state.loadingStatuses.findIndex( status => status === payload )\r\n            if( index != -1 )\r\n                state.loadingStatuses.splice( index, 1 )\r\n        },\r\n        addToLoadingCertified: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.loadingCertified.push(payload)\r\n        },\r\n        removeFromLoadingCertified: ( state, {payload}: PayloadAction<string> ) => {\r\n            let index = state.loadingCertified.findIndex( status => status === payload )\r\n            if( index != -1 )\r\n                state.loadingCertified.splice( index, 1 )\r\n        },\r\n        setActiveWatch: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.activeWatch = payload\r\n        },\r\n        setOpenAddModal: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.openAddModal = payload\r\n        },\r\n        setConfirmed: ( state, {payload}: PayloadAction<{ id: string, confirmed: boolean }> ) => {\r\n            let index = state.watches.findIndex( watch => watch.id === payload.id )\r\n            if( index !== -1 )\r\n                state.watches[index].confirmed = payload.confirmed\r\n            let filteredIndex = state.filteredWatches.findIndex( watch => watch.id === payload.id )\r\n            if( filteredIndex !== -1 )\r\n                state.filteredWatches[filteredIndex].confirmed = payload.confirmed\r\n        },\r\n        setCertified: ( state, {payload}: PayloadAction<{ id: string, certified: boolean }> ) => {\r\n            let index = state.watches.findIndex( watch => watch.id === payload.id )\r\n            if( index !== -1 )\r\n                state.watches[index].certified = payload.certified\r\n            let filteredIndex = state.filteredWatches.findIndex( watch => watch.id === payload.id )\r\n            if( filteredIndex !== -1 )\r\n                state.filteredWatches[filteredIndex].certified = payload.certified\r\n        },\r\n        setFeatured: ( state, {payload}: PayloadAction<{ id: string, featured: boolean }> ) => {\r\n            let index = state.watches.findIndex( watch => watch.id === payload.id )\r\n            if( index !== -1 )\r\n                state.watches[index].featured = payload.featured\r\n            let filteredIndex = state.filteredWatches.findIndex( watch => watch.id === payload.id )\r\n            if( filteredIndex !== -1 )\r\n                state.filteredWatches[filteredIndex].featured = payload.featured\r\n        },\r\n    }\r\n})","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\Watches.tsx",["299","300","301","302"],"import React, { useState } from 'react'\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { watch, watchesSlice, watchesState } from './WatchesSlice'\r\nimport { addWatcheSlice } from './AddModal/AddWatchSlice'\r\n\r\n// Models\r\nimport { Watch } from '../../services/models/models'\r\n\r\n// API\r\nimport API from '../../services/api/api'\r\n\r\n// Components\r\nimport TableActionBar from '../../components/TableActionBar/TableActionBar'\r\nimport { DashboardTable } from '../../components/Table/Table'\r\nimport { EllipsisLoader, WhiteboxLoader } from '../../components/Loader/Loader'\r\nimport { SelectField } from '../../components/FormElements/FormElements'\r\nimport DetailsModal from '../../components/DetailsModal/DetailsModal'\r\nimport AddWatchModal from './AddModal/AddWatchModal'\r\n\r\nexport default () => {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state = useSelector( ( state: { watches: watchesState } ) => state.watches )\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    // Status options\r\n    const status_options = [\r\n        { value: true, label: t(\"approved\") },\r\n        { value: false, label: t(\"pending\") }\r\n    ]\r\n\r\n    // Certfieid options\r\n    const certified_options = [\r\n        { value: true, label: t(\"certified\") },\r\n        { value: false, label: t(\"not_certified\") }\r\n    ]\r\n\r\n    // Search\r\n    const search = (keyword: string) => {\r\n        if(keyword === \"\") {\r\n            dispatch( watchesSlice.actions.setFilteredWatches([]) )\r\n            return\r\n        }\r\n        dispatch(watchesSlice.actions.setIsLoading(true))\r\n\r\n        ENDPOINTS.watches().search(keyword)\r\n        .then( (response: any) => {\r\n            \r\n            let watches: watch[] = []\r\n\r\n            response.data?.data?.searchProducts?.map( (item: any) => {\r\n                watches.push({\r\n                    id: String(item.id),\r\n                    name: String(item.name ? item.name : \"N/A\"),\r\n                    model: String(item.model ? item.model : \"N/A\"),\r\n                    description: String(item.description ? item.description : \"N/A\"),\r\n                    condition: String(item.condition ? item.condition : \"N/A\"),\r\n                    location: String(item.location ? item.location : \"N/A\"),\r\n                    featured: Boolean(item.featured),\r\n                    confirmed: Boolean(item.confirmed),\r\n                    certified: Boolean(item.certified),\r\n                    images: item.images?.map((image: {url: string;}) => \"https://dev.timepiece.qa/\" + image.url),\r\n                    delivery: String(item.delivery ? item.delivery : \"N/A\"),\r\n                    price: Number(item.price),\r\n                    production_year: Number(item.production_year),\r\n                    case_material: String(item.case_material ? item.case_material : \"N/A\"),\r\n                    movement: String(item.movement ? item.movement : \"N/A\"),\r\n                    bracelet_material: String(item.bracelet_material ? item.bracelet_material : \"N/A\"),\r\n                    gender: String(item.gender ? item.gender : \"N/A\"),\r\n                    calibar: String(item.calibar ? item.calibar : \"N/A\"),\r\n                    base_calibar: String(item.base_calibar ? item.base_calibar : \"N/A\"),\r\n                    power_reserve: Number(item.power_reserve),\r\n                    jewels: Number(item.jewels),\r\n                    case_diameter: Number(item.case_diameter),\r\n                    water_resistance: Number(item.water_resistance),\r\n                    bezel_material: String(item.bezel_material ? item.bezel_material : \"N/A\"),\r\n                    crystal: String(item.crystal ? item.crystal : \"N/A\"),\r\n                    dial: String(item.dial ? item.dial : \"N/A\"),\r\n                    dial_numbers: String(item.dial_numbers ? item.dial_numbers : \"N/A\"),\r\n                    bracelet_color: String(item.bracelet_color ? item.bracelet_color : \"N/A\"),\r\n                    clasp: String(item.clasp ? item.clasp : \"N/A\"),\r\n                    clasp_material: String(item.clasp_material ? item.clasp_material : \"N/A\"),\r\n                })\r\n            })\r\n\r\n            dispatch( watchesSlice.actions.setFilteredWatches(watches) )\r\n            dispatch(watchesSlice.actions.setIsLoading(false))\r\n\r\n        })\r\n\r\n    }\r\n\r\n    // Get default status value\r\n    const getDefaultStatusValue = (confirmed: boolean) => {\r\n        if (confirmed) return status_options[0];\r\n        else return status_options[1];\r\n    };\r\n\r\n    // Get default certified value\r\n    const getDefaultCertifiedValue = (confirmed: boolean) => {\r\n        if (confirmed) return certified_options[0];\r\n        else return certified_options[1];\r\n    };\r\n\r\n    // Change watch status\r\n    const changeStatus = (selected: boolean, id: string) => {\r\n        dispatch( watchesSlice.actions.addToLoadingStatuses(id) )\r\n        ENDPOINTS.watches().updateStatus( { id, confirmed: selected } )\r\n        .then( () => {\r\n            dispatch( watchesSlice.actions.removeFromLoadingStatuses(id) )\r\n            dispatch( watchesSlice.actions.setConfirmed({ id: id, confirmed: selected }) )\r\n        })\r\n    }\r\n\r\n    // Change watch certified\r\n    const changeCertified = (selected: boolean, id: string) => {\r\n        dispatch( watchesSlice.actions.addToLoadingCertified(id) )\r\n        ENDPOINTS.watches().updateCertified( { id, certified: selected } )\r\n        .then( () => {\r\n            dispatch( watchesSlice.actions.removeFromLoadingCertified(id) )\r\n            dispatch( watchesSlice.actions.setCertified({ id: id, certified: selected }) )\r\n        })\r\n    }\r\n\r\n    // Fetch Data\r\n    const fetchData = (page: number, page_size: number = 10) => {\r\n        \r\n        dispatch( watchesSlice.actions.setIsFetching(true) )\r\n\r\n        ENDPOINTS.watches().index( { limit: page_size, offset: page - 1 } )\r\n        .then( (response: any) => {\r\n\r\n            // Has more\r\n            if( response.data?.data?.getProducts?.total <= page * page_size )\r\n                dispatch( watchesSlice.actions.setHasMore(false) )\r\n            \r\n            let watches: watch[] = []\r\n\r\n            response.data?.data?.getProducts?.results?.map( (item: any) => {\r\n                watches.push({\r\n                    id: String(item.id),\r\n                    name: String(item.name ? item.name : \"N/A\"),\r\n                    model: String(item.model ? item.model : \"N/A\"),\r\n                    description: String(item.description ? item.description : \"N/A\"),\r\n                    condition: String(item.condition ? item.condition : \"N/A\"),\r\n                    location: String(item.location ? item.location : \"N/A\"),\r\n                    featured: Boolean(item.featured),\r\n                    confirmed: Boolean(item.confirmed),\r\n                    certified: Boolean(item.certified),\r\n                    images: item.images?.map((image: {url: string;}) => \"https://dev.timepiece.qa/\" + image.url),\r\n                    delivery: String(item.delivery ? item.delivery : \"N/A\"),\r\n                    price: Number(item.price),\r\n                    production_year: Number(item.production_year),\r\n                    case_material: String(item.case_material ? item.case_material : \"N/A\"),\r\n                    movement: String(item.movement ? item.movement : \"N/A\"),\r\n                    bracelet_material: String(item.bracelet_material ? item.bracelet_material : \"N/A\"),\r\n                    gender: String(item.gender ? item.gender : \"N/A\"),\r\n                    calibar: String(item.calibar ? item.calibar : \"N/A\"),\r\n                    base_calibar: String(item.base_calibar ? item.base_calibar : \"N/A\"),\r\n                    power_reserve: Number(item.power_reserve),\r\n                    jewels: Number(item.jewels),\r\n                    case_diameter: Number(item.case_diameter),\r\n                    water_resistance: Number(item.water_resistance),\r\n                    bezel_material: String(item.bezel_material ? item.bezel_material : \"N/A\"),\r\n                    crystal: String(item.crystal ? item.crystal : \"N/A\"),\r\n                    dial: String(item.dial ? item.dial : \"N/A\"),\r\n                    dial_numbers: String(item.dial_numbers ? item.dial_numbers : \"N/A\"),\r\n                    bracelet_color: String(item.bracelet_color ? item.bracelet_color : \"N/A\"),\r\n                    clasp: String(item.clasp ? item.clasp : \"N/A\"),\r\n                    clasp_material: String(item.clasp_material ? item.clasp_material : \"N/A\"),\r\n                })\r\n            })\r\n\r\n            dispatch( watchesSlice.actions.addWatches(watches) )\r\n            dispatch( watchesSlice.actions.setIsLoaded(true) )\r\n            dispatch( watchesSlice.actions.setIsFetching(false) )\r\n        })\r\n\r\n    }\r\n\r\n    interface tableDataType { [key: string]: { [key: string]: any } }\r\n    const generateData: () => tableDataType = () => {\r\n        let data: tableDataType = {}\r\n        let watchesToIndex = state.filteredWatches.length > 0 ? state.filteredWatches : state.watches\r\n        watchesToIndex.map( (item, index) => {\r\n            data[item.id] = {\r\n                id: item.id,\r\n                name: item.name,\r\n                condition: item.condition,\r\n                price: item.price,\r\n                status: <div onClick={(e: React.MouseEvent<HTMLDivElement>) => e.stopPropagation()}>\r\n                            <SelectField isLoading={state.loadingStatuses.includes(item.id)} defaultValue={getDefaultStatusValue(item.confirmed)} onChange={ (selected: { value: boolean }) => changeStatus( selected.value, item.id ) } options={status_options} />\r\n                        </div>,\r\n                certified: <div onClick={(e: React.MouseEvent<HTMLDivElement>) => e.stopPropagation()}>\r\n                            <SelectField isLoading={state.loadingCertified.includes(item.id)} defaultValue={getDefaultCertifiedValue(item.certified)} onChange={ (selected: { value: boolean }) => changeCertified( selected.value, item.id ) } options={certified_options} />\r\n                        </div>,\r\n                featured: <i className={ \"icon-star-\" + ( item.featured ? \"2\" : \"o\" ) } onClick={(e: React.MouseEvent<HTMLLIElement>) => toggleFeatured(e, item.id, item.featured) } />,\r\n                actions: <div className=\"show-on-hover\">\r\n                            <i className=\"icon-info\" onClick={(e: React.MouseEvent<HTMLLIElement>) => showDetails(e, item.id) } />\r\n                            <i className=\"icon-edit\" onClick={(e: React.MouseEvent<HTMLLIElement>) => edit(e, item.id) } />\r\n                            <i className=\"icon-delete\" onClick={(e: React.MouseEvent<HTMLLIElement>) => {\r\n                                e.stopPropagation()\r\n                                remove(item.id)\r\n                            }} />\r\n                        </div>\r\n            }\r\n        })\r\n        return data\r\n    }\r\n\r\n\r\n    // Toggle featured\r\n    const toggleFeatured = (e: React.MouseEvent<HTMLLIElement>, id: string, currentValue: boolean) => {\r\n        e.stopPropagation()\r\n        \r\n        ENDPOINTS.watches().setFeatured({ id, featured: !currentValue })\r\n        .then((response: any) => {\r\n            // In case somthing went wrong\r\n            let watches = state.filteredWatches.length > 0 ? state.filteredWatches : state.watches\r\n            let watchToEdit = watches.find( watch => watch.id === id )\r\n            if( watchToEdit && watchToEdit.featured !== response.data?.data?.updateProduct?.featured )\r\n                dispatch( watchesSlice.actions.setFeatured({ id, featured: response.data?.data?.updateProduct?.featured }) )\r\n        })\r\n\r\n        dispatch( watchesSlice.actions.setFeatured({ id, featured: !currentValue }) )\r\n    }\r\n\r\n    // Edit\r\n    const edit = (e: React.MouseEvent<HTMLLIElement>, id: string) => {\r\n        e.stopPropagation()\r\n        let watches = state.filteredWatches.length > 0 ? state.filteredWatches : state.watches\r\n        let watchToEdit = watches.find(watch => watch.id === id)\r\n        if(watchToEdit) {\r\n            dispatch( addWatcheSlice.actions.setAll({\r\n                clasp_material: watchToEdit.clasp_material,\r\n                clasp: watchToEdit.clasp,\r\n                bracelet_color: watchToEdit.bracelet_color,\r\n                dial_numbers: watchToEdit.dial_numbers,\r\n                dial: watchToEdit.dial,\r\n                crystal: watchToEdit.crystal,\r\n                bezel_material: watchToEdit.bezel_material,\r\n                water_resistance: String(watchToEdit.water_resistance),\r\n                case_diameter: String(watchToEdit.case_diameter),\r\n                jewels: String(watchToEdit.jewels),\r\n                power_reserve: String(watchToEdit.power_reserve),\r\n                base_calibar: watchToEdit.base_calibar,\r\n                calibar: watchToEdit.calibar,\r\n                gender: watchToEdit.gender,\r\n                production_year: String(watchToEdit.production_year),\r\n                bracelet_material: watchToEdit.bracelet_material,\r\n                case_material: watchToEdit.case_material,\r\n                movement: watchToEdit.movement,\r\n                location: watchToEdit.location,\r\n                description: watchToEdit.description,\r\n                condition: watchToEdit.condition,\r\n                delivery: watchToEdit.delivery,\r\n                price: String(watchToEdit.price),\r\n                model: watchToEdit.model,\r\n                brand: watchToEdit.name\r\n            }) )\r\n            dispatch( addWatcheSlice.actions.setEditId(watchToEdit.id) )\r\n            dispatch( watchesSlice.actions.setOpenAddModal(true) )\r\n        }\r\n\r\n    }\r\n\r\n    // Details Modal\r\n    const showDetails = (e: React.MouseEvent<HTMLLIElement>, id: string) => {\r\n        e.stopPropagation();\r\n        dispatch( watchesSlice.actions.setDetailsIsOpen(true) )\r\n        dispatch( watchesSlice.actions.setActiveWatch(id) )\r\n    }\r\n    \r\n    const getActiveWatch = (): { [key: string]: any } => {\r\n        let watches = state.filteredWatches.length > 0 ? state.filteredWatches : state.watches\r\n        let activeWatch = watches.find(watch => watch.id === state.activeWatch)\r\n        \r\n        if(!activeWatch)\r\n            return {}\r\n\r\n        let watch: Watch = {\r\n            name: activeWatch.name,\r\n            model: activeWatch.model,\r\n            description: activeWatch.description,\r\n            condition: activeWatch.condition,\r\n            location: activeWatch.location,\r\n            delivery: activeWatch.delivery,\r\n            price: activeWatch.price,\r\n            production_year: activeWatch.production_year,\r\n            case_material: activeWatch.case_material,\r\n            movement: activeWatch.movement,\r\n            bracelet_material: activeWatch.bracelet_color,\r\n            gender: activeWatch.gender,\r\n            calibar: activeWatch.calibar,\r\n            base_calibar: activeWatch.base_calibar,\r\n            power_reserve: activeWatch.power_reserve,\r\n            jewels: activeWatch.jewels,\r\n            case_diameter: activeWatch.case_diameter,\r\n            water_resistance: activeWatch.water_resistance,\r\n            bezel_material: activeWatch.bezel_material,\r\n            crystal: activeWatch.crystal,\r\n            dial: activeWatch.dial,\r\n            dial_numbers: activeWatch.dial_numbers,\r\n            bracelet_color: activeWatch.bracelet_color,\r\n            clasp: activeWatch.clasp,\r\n            clasp_material: activeWatch.clasp_material,\r\n            images: activeWatch.images\r\n        }\r\n        return watch\r\n    }\r\n\r\n\r\n    // Toggle Selected id\r\n    const [selectedIds, setSelectedIds] = useState<string[]>([]);\r\n    const toggleSelectedId = (id: string) => {\r\n        let index = selectedIds.findIndex(selectedId => selectedId === id)\r\n        if( index !== -1 ) {\r\n            setSelectedIds(selectedIds.filter(selectedId => selectedId !== id))\r\n        } else\r\n            setSelectedIds([...selectedIds, id])\r\n    }\r\n\r\n    // Delete\r\n    const remove = (id? :string) => {\r\n        \r\n        dispatch( watchesSlice.actions.setIsLoading(true) )\r\n\r\n        ENDPOINTS.watches().delete(id ? [id] : selectedIds)\r\n        .then(() => {\r\n            dispatch( watchesSlice.actions.setIsLoading(false) )\r\n            dispatch( watchesSlice.actions.deleteWatches(id ? [id] : selectedIds) )\r\n            if(!id) setSelectedIds([])\r\n        })\r\n\r\n    }\r\n\r\n\r\n    // First fetch\r\n    if( !state.isLoaded && !state.isFetching )\r\n        fetchData(1)\r\n\r\n    return(\r\n        <>\r\n            { state.isLoaded ?\r\n            <>\r\n                { state.isLoading ? <WhiteboxLoader /> : \"\"}\r\n                <TableActionBar\r\n                    title={t(\"watches\")}\r\n                    search={search}\r\n                    showFilter={false}\r\n                    showDelete={selectedIds.length > 0}\r\n                    add={() => dispatch( watchesSlice.actions.setOpenAddModal(true) )}\r\n                    addText={t(\"add_to_watches\")}\r\n                    delete={remove}\r\n                    />\r\n                \r\n                <DashboardTable\r\n                    header={[ \"#\", t(\"name\"), t(\"condition\"), t(\"price\"), t(\"status\"), t(\"certified\"), t(\"featured\"), \"\" ]}\r\n                    body={generateData()}\r\n                    onSelect={toggleSelectedId}\r\n                    hasMore={state.hasMore && state.filteredWatches.length === 0}\r\n                    loadMore={fetchData}\r\n                    />\r\n                \r\n                <DetailsModal isOpen={state.detailsIsOpen} toggle={() => dispatch( watchesSlice.actions.setDetailsIsOpen(false) )} data={getActiveWatch()} title={t(\"watch_details\")} />\r\n\r\n                <AddWatchModal />\r\n\r\n            </> : <div className=\"center\"><EllipsisLoader /></div> }\r\n        </>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Analytics\\AnalyticsSlice.ts",[],"E:\\Self Projects\\timepiece\\src\\components\\DetailsModal\\DetailsModal.tsx",["303","304","305"],"import React from 'react'\r\nimport SimpleImageSlider from \"react-simple-image-slider\";\r\nimport { useTranslation } from 'react-multi-lang'\r\nimport { EllipsisLoader } from '../Loader/Loader'\r\nimport Modal from '../Modal/Modal'\r\n\r\nimport './DetailsModal.css'\r\n\r\ninterface DetailsModalProps {\r\n    isOpen: boolean,\r\n    toggle: Function,\r\n    isLoading?: boolean,\r\n    title?: string,\r\n    data: {\r\n        [key: string]: any\r\n    }\r\n}\r\n\r\n\r\nexport default (props: DetailsModalProps) => {\r\n    // Translation\r\n    const t = useTranslation()\r\n    return <Modal open={props.isOpen} toggle={props.toggle}>\r\n        { props.isLoading ?\r\n        <div className=\"center\"><EllipsisLoader /></div> :\r\n        <>\r\n        { props.title ? <h3 className=\"details-modal-title\">{props.title}</h3> : \"\" }\r\n        <table className=\"details-table\">\r\n            { Object.keys(props.data).map( (key, index) => (\r\n                <>\r\n                { props.data[key] && props.data[key].length > 0 || key === \"address\" ?\r\n                <tr key={key}>\r\n                    <td>{t(key)}</td>\r\n                    { key === \"images\" ?\r\n                    <td>\r\n                        <SimpleImageSlider\r\n                                showNavs={true}\r\n                                showBullets={true}\r\n                                width={500}\r\n                                height={700}\r\n                                images={props.data[key]?.map((image: string) => ({ url: image }))}\r\n                            />\r\n                    </td> :\r\n                    <td>{props.data[key]}</td> }\r\n                </tr> : \"\" }\r\n                </>\r\n            )) }\r\n        </table>\r\n        </> }\r\n    </Modal>\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\AddWatchModal.tsx",["306"],"import React from 'react'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { watchesSlice, watchesState } from '../WatchesSlice'\r\nimport { addWatcheSlice, addWatcheState } from './AddWatchSlice'\r\n\r\n// Components\r\nimport Modal from '../../../components/Modal/Modal'\r\nimport Step1 from './Steps/Step1'\r\nimport Step2 from './Steps/Step2'\r\nimport Step3 from './Steps/Step3'\r\nimport { SuccessMark, WhiteboxLoader } from '../../../components/Loader/Loader'\r\nimport { t } from 'react-multi-lang'\r\n\r\nexport default () => {\r\n    \r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const watchesState = useSelector( ( state: { watches: watchesState } ) => state.watches )\r\n    const addState = useSelector( ( state: { add_watch: addWatcheState } ) => state.add_watch )\r\n\r\n    const toggle = () => {\r\n        dispatch( watchesSlice.actions.setOpenAddModal(false) )\r\n        dispatch( addWatcheSlice.actions.init() )\r\n    }\r\n\r\n    return(\r\n        <Modal open={watchesState.openAddModal} toggle={toggle}>\r\n            \r\n            { addState.isLoading ? <WhiteboxLoader /> : \"\" }\r\n            { addState.isSuccess ? <SuccessMark /> : \"\" }\r\n\r\n            {/* Steps */}\r\n            <h2 className=\"text-center\" style={{ margin: \"0 0 20px\" }}>\r\n            {\r\n                addState.step === 1 ? t(\"basic_information\") :\r\n                addState.step === 2 ? t(\"watch_materials\") :\r\n                t(\"advanced_information\")\r\n            }\r\n            </h2>\r\n\r\n            {\r\n                addState.step === 1 ? <Step1 /> :\r\n                addState.step === 2 ? <Step2 /> :\r\n                <Step3 />\r\n            }\r\n\r\n        </Modal>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\Steps\\Step1.tsx",["307","308"],"import React, { useState } from 'react'\r\n\r\n// Gird system\r\nimport { Col, Row } from 'react-grid-system'\r\n\r\n// Translation\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addWatcheSlice, addWatcheState } from '../AddWatchSlice'\r\n\r\n// Components\r\nimport { InputField, SelectField, Textarea } from '../../../../components/FormElements/FormElements'\r\nimport { BrandsMenu } from '../../../../components/PredefinedMenus/PredefinedMenus'\r\n\r\n\r\n\r\nexport default () => {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // Hooks\r\n    const [showErrors, setShowErrors] = useState<boolean>(false)\r\n\r\n    // Condition options\r\n    const condition_options = [\r\n        { value: \"new\", label: t(\"new\") },\r\n        { value: \"unworn\", label: t(\"unworn\") },\r\n        { value: \"excellent\", label: t(\"excellent\") },\r\n        { value: \"good\", label: t(\"good\") },\r\n        { value: \"fair\", label: t(\"fair\") }\r\n    ]\r\n    const delivery_options = [\r\n        { value: \"original_box\", label: t(\"original_box\") },\r\n        { value: \"original_papers\", label: t(\"original_papers\") },\r\n    ]\r\n    const location_options = [\r\n        { value: \"qatar\", label: t(\"qatar\") },\r\n        { value: \"kuwait\", label: t(\"kuwait\") },\r\n        { value: \"uae\", label: t(\"uae\") },\r\n    ]\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state = useSelector((state: { add_watch: addWatcheState }) => state.add_watch)\r\n\r\n    const nextStep = (e: React.FormEvent<HTMLFormElement>) => {\r\n\r\n        e.preventDefault()\r\n\r\n        if (state.fields[\"brand\"] === \"\" ||\r\n            state.fields[\"model\"] === \"\" ||\r\n            state.fields[\"price\"] === \"\" ||\r\n            state.fields[\"delivery\"] === \"\" ||\r\n            state.fields[\"condition\"] === \"\" ||\r\n            state.fields[\"description\"] === \"\" ||\r\n            state.fields[\"location\"] === \"\") {\r\n            setShowErrors(true)\r\n            return\r\n        }\r\n\r\n        dispatch( addWatcheSlice.actions.setStep(2) )\r\n\r\n    }\r\n\r\n    const getDeliveryOptions = (): { value: string, label: string }[] => {\r\n        let selected_options = state.fields.delivery.split(\", \")\r\n        let options: any[] = []\r\n        selected_options.map( ( selected_option ) => {\r\n            options.push( delivery_options.find( option => option.value === selected_option ) )\r\n        })\r\n        return options\r\n    }\r\n\r\n    return (\r\n        <div className=\"step1\" style={{ width: 500, maxWidth: \"90vw\" }}>\r\n            <form onSubmit={nextStep}>\r\n\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <BrandsMenu\r\n                            placeholder={t(\"brand\") + \" *\"}\r\n                            value={state.fields.brand ? { label: state.fields.brand, value: state.fields.brand } : null}\r\n                            onChange={(option: { value: string }) => dispatch(addWatcheSlice.actions.set({ field: \"brand\", value: option.value }))}\r\n                            error={(showErrors && state.fields.brand === \"\") ? t(\"required_error\") : \"\"} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"model\") + \" *\"}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"model\", value: e.target.value }))}\r\n                            value={state.fields.model}\r\n                            error={(showErrors && state.fields.model === \"\") ? t(\"required_error\") : \"\"} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"price\") + \" *\"}\r\n                            type=\"number\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"price\", value: e.target.value }))}\r\n                            value={state.fields.price}\r\n                            error={(showErrors && state.fields.price === \"\") ? t(\"required_error\") : \"\"} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SelectField\r\n                            placeholder={t(\"condition\") + \" *\"}\r\n                            value={state.fields.condition ? condition_options.find( option => option.value === state.fields.condition ) : null}\r\n                            onChange={(option: { value: string }) => dispatch(addWatcheSlice.actions.set({ field: \"condition\", value: option.value }))}\r\n                            error={(showErrors && state.fields.condition === \"\") ? t(\"required_error\") : \"\"}\r\n                            options={condition_options} />\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <SelectField\r\n                            placeholder={t(\"scope_of_delivery\") + \" *\"}\r\n                            isMulti\r\n                            value={state.fields.delivery ? getDeliveryOptions() : null}\r\n                            onChange={(option: {value: string}[]) => {\r\n                                if(option) {\r\n                                    let joined_value = option.map( (item) => ( item.value )).join(\", \")\r\n                                    dispatch(addWatcheSlice.actions.set({ field: \"delivery\", value: joined_value }))\r\n                                } else if( state.fields.delivery !== \"\" )\r\n                                    dispatch(addWatcheSlice.actions.set({ field: \"delivery\", value: \"\" }))\r\n                            }}\r\n                            error={(showErrors && state.fields.delivery === \"\") ? t(\"required_error\") : \"\"}\r\n                            options={delivery_options} />\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <Textarea\r\n                            label={t(\"description\") + \" *\"}\r\n                            rows={3}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"description\", value: e.target.value }))}\r\n                            value={state.fields.description}\r\n                            error={(showErrors && state.fields.description === \"\") ? t(\"required_error\") : \"\"} />\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <SelectField\r\n                            placeholder={t(\"location\") + \" *\"}\r\n                            value={state.fields.location ? location_options.find( option => option.value === state.fields.location ) : null}\r\n                            onChange={(option: { value: string }) => dispatch(addWatcheSlice.actions.set({ field: \"location\", value: option.value }))}\r\n                            error={(showErrors && state.fields.location === \"\") ? t(\"required_error\") : \"\"}\r\n                            options={location_options} />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <button className=\"button round bg-gold color-white margin-top-30\" style={{ padding: \"0 80px\", marginBottom: 5 }}>{t(\"next\")}</button>\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\AddWatchSlice.ts",[],"E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\Steps\\Step2.tsx",["309","310"],"import React, { useState } from 'react'\r\n\r\n// Gird system\r\nimport { Col, Row } from 'react-grid-system'\r\n\r\n// Translation\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addWatcheSlice, addWatcheState } from '../AddWatchSlice'\r\n\r\n// Components\r\nimport { InputField, SelectField } from '../../../../components/FormElements/FormElements'\r\n\r\nexport default () => {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // Bracelet material options\r\n    const bracelet_material_options = [\r\n        { value: \"steel\", label: t(\"steel\") },\r\n        { value: 'rose_gold', label: t(\"rose_gold\") },\r\n        { value: 'yellow_gold', label: t(\"yellow_gold\") },\r\n        { value: 'titanium', label: t(\"titanium\") },\r\n        { value: 'platinum', label: t(\"platinum\") },\r\n        { value: 'white_gold', label: t(\"white_gold\") },\r\n        { value: 'leather', label: t(\"leather\") },\r\n        { value: 'rubber', label: t(\"rubber\") },\r\n    ]\r\n\r\n    // Bracelet material options\r\n    const case_material_options = [\r\n        { value: \"steel\", label: t(\"steel\") },\r\n        { value: 'rose_gold', label: t(\"rose_gold\") },\r\n        { value: 'yellow_gold', label: t(\"yellow_gold\") },\r\n        { value: 'titanium', label: t(\"titanium\") },\r\n        { value: 'platinum', label: t(\"platinum\") },\r\n        { value: 'white_gold', label: t(\"white_gold\") },\r\n    ]\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state = useSelector((state: { add_watch: addWatcheState }) => state.add_watch)\r\n\r\n    const nextStep = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        dispatch(addWatcheSlice.actions.setStep(3))\r\n    }\r\n\r\n    return (\r\n        <div className=\"step2\" style={{ width: 500, maxWidth: \"90vw\" }}>\r\n            <form onSubmit={nextStep}>\r\n\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"clasp\")}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"clasp\", value: e.target.value }))}\r\n                            value={state.fields.clasp} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"clasp_material\")}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"clasp_material\", value: e.target.value }))}\r\n                            value={state.fields.clasp_material} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"bracelet_color\")}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"bracelet_color\", value: e.target.value }))}\r\n                            value={state.fields.bracelet_color} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SelectField\r\n                            placeholder={t(\"bracelet_material\")}\r\n                            value={state.fields.bracelet_material ? bracelet_material_options.find( option => option.value === state.fields.bracelet_material ) : null}\r\n                            onChange={(option: { value: string }) => dispatch(addWatcheSlice.actions.set({ field: \"bracelet_material\", value: option.value }))}\r\n                            options={bracelet_material_options} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SelectField\r\n                            placeholder={t(\"case_material\")}\r\n                            value={state.fields.case_material ? case_material_options.find( option => option.value === state.fields.case_material ) : null}\r\n                            onChange={(option: { value: string }) => dispatch(addWatcheSlice.actions.set({ field: \"case_material\", value: option.value }))}\r\n                            options={case_material_options} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"case_diameter\")}\r\n                            type=\"number\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"case_diameter\", value: e.target.value }))}\r\n                            value={state.fields.case_diameter} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"jewels\")}\r\n                            type=\"number\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"jewels\", value: e.target.value }))}\r\n                            value={state.fields.jewels} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"crystal\")}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"crystal\", value: e.target.value }))}\r\n                            value={state.fields.crystal} />\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <InputField\r\n                            label={t(\"bezel_material\")}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"bezel_material\", value: e.target.value }))}\r\n                            value={state.fields.bezel_material} />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <button className=\"button round bg-gray color-gold margin-top-30\" style={{ padding: \"0 70px\" }}\r\n                    onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                        e.preventDefault();\r\n                        dispatch(addWatcheSlice.actions.setStep(1))\r\n                    }}\r\n                >{t(\"back\")}</button>\r\n                <span className=\"margin-20\"></span>\r\n                <button className=\"button round bg-gold color-white margin-top-30\" style={{ padding: \"0 80px\", marginBottom: 5 }}>{t(\"next\")}</button>\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Watches\\AddModal\\Steps\\Step3.tsx",["311","312"],"import React, { useState } from 'react'\r\n\r\n// Gird system\r\nimport { Col, Row } from 'react-grid-system'\r\n\r\n// Translation\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addWatcheSlice, addWatcheState } from '../AddWatchSlice'\r\nimport { watch, watchesSlice } from '../../WatchesSlice'\r\n\r\n// API\r\nimport API from '../../../../services/api/api'\r\n\r\n// Components\r\nimport { InputField, SelectField } from '../../../../components/FormElements/FormElements'\r\n\r\nexport default () => {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // Movement options\r\n    const movement_options = [\r\n        { value: \"automatic\", label: t(\"automatic\") },\r\n        { value: 'quartz', label: t(\"quartz\") },\r\n        { value: 'manual', label: t(\"manual\") },\r\n    ]\r\n    \r\n    const gender_options = [\r\n        { value: \"mens_watch\", label: t(\"mens_watch\") },\r\n        { value: 'unisex', label: t(\"unisex\") },\r\n        { value: 'womens_watch', label: t(\"women\") },\r\n    ]\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state = useSelector((state: { add_watch: addWatcheState }) => state.add_watch)\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    const submitWatch = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n\r\n        // Submit\r\n        dispatch(addWatcheSlice.actions.setIsLoading(true))\r\n\r\n        let api_call = state.editId ? ENDPOINTS.watches().update(state.fields, state.editId) : ENDPOINTS.watches().add(state.fields)\r\n\r\n        api_call\r\n            .then((response: any) => {\r\n                \r\n                dispatch(addWatcheSlice.actions.setIsLoading(false))\r\n                dispatch(addWatcheSlice.actions.setIsSuccess(true))\r\n\r\n                setTimeout(() => {\r\n                    dispatch( addWatcheSlice.actions.init() )\r\n                    dispatch(watchesSlice.actions.setOpenAddModal(false))\r\n                }, 2000);\r\n\r\n                // Add to table\r\n                let watch: watch = {\r\n                    id: state.editId ? String(response.data?.data?.updateProduct?.id) : String(response.data?.data?.addProduct?.id),\r\n                    name: String(state.fields.brand ? state.fields.brand : \"N/A\"),\r\n                    model: String(state.fields.model ? state.fields.model : \"N/A\"),\r\n                    description: String(state.fields.description ? state.fields.description : \"N/A\"),\r\n                    condition: String(state.fields.condition ? state.fields.condition : \"N/A\"),\r\n                    location: String(state.fields.location ? state.fields.location : \"N/A\"),\r\n                    featured: false,\r\n                    confirmed: false,\r\n                    certified: false,\r\n                    images: [],\r\n                    delivery: String(state.fields.delivery ? state.fields.delivery : \"N/A\"),\r\n                    price: Number(state.fields.price),\r\n                    production_year: Number(state.fields.production_year),\r\n                    case_material: String(state.fields.case_material ? state.fields.case_material : \"N/A\"),\r\n                    movement: String(state.fields.movement ? state.fields.movement : \"N/A\"),\r\n                    bracelet_material: String(state.fields.bracelet_material ? state.fields.bracelet_material : \"N/A\"),\r\n                    gender: String(state.fields.gender ? state.fields.gender : \"N/A\"),\r\n                    calibar: String(state.fields.calibar ? state.fields.calibar : \"N/A\"),\r\n                    base_calibar: String(state.fields.base_calibar ? state.fields.base_calibar : \"N/A\"),\r\n                    power_reserve: Number(state.fields.power_reserve),\r\n                    jewels: Number(state.fields.jewels),\r\n                    case_diameter: Number(state.fields.case_diameter),\r\n                    water_resistance: Number(state.fields.water_resistance),\r\n                    bezel_material: String(state.fields.bezel_material ? state.fields.bezel_material : \"N/A\"),\r\n                    crystal: String(state.fields.crystal ? state.fields.crystal : \"N/A\"),\r\n                    dial: String(state.fields.dial ? state.fields.dial : \"N/A\"),\r\n                    dial_numbers: String(state.fields.dial_numbers ? state.fields.dial_numbers : \"N/A\"),\r\n                    bracelet_color: String(state.fields.bracelet_color ? state.fields.bracelet_color : \"N/A\"),\r\n                    clasp: String(state.fields.clasp ? state.fields.clasp : \"N/A\"),\r\n                    clasp_material: String(state.fields.clasp_material ? state.fields.clasp_material : \"N/A\"),\r\n                }\r\n\r\n                if( state.editId )\r\n                    dispatch(watchesSlice.actions.updateWatch(watch))\r\n                else\r\n                    dispatch(watchesSlice.actions.addWatches([watch]))\r\n\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"step2\" style={{ width: 500, maxWidth: \"90vw\" }}>\r\n            <form onSubmit={submitWatch}>\r\n\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"calibar\")}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"calibar\", value: e.target.value }))}\r\n                            value={state.fields.calibar} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"base_calibar\")}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"base_calibar\", value: e.target.value }))}\r\n                            value={state.fields.base_calibar} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"power_reserve\")}\r\n                            type=\"number\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"power_reserve\", value: e.target.value }))}\r\n                            value={state.fields.power_reserve} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"water_resistance\")}\r\n                            type=\"number\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"water_resistance\", value: e.target.value }))}\r\n                            value={state.fields.water_resistance} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"dial\")}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"dial\", value: e.target.value }))}\r\n                            value={state.fields.dial} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"dial_numbers\")}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"dial_numbers\", value: e.target.value }))}\r\n                            value={state.fields.dial_numbers} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SelectField\r\n                            placeholder={t(\"gender\")}\r\n                            value={state.fields.gender ? gender_options.find( option => option.value === state.fields.gender ) : null}\r\n                            onChange={(option: { value: string }) => dispatch(addWatcheSlice.actions.set({ field: \"gender\", value: option.value }))}\r\n                            options={gender_options} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <InputField\r\n                            label={t(\"production_year\")}\r\n                            type=\"number\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(addWatcheSlice.actions.set({ field: \"production_year\", value: e.target.value }))}\r\n                            value={state.fields.production_year} />\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <SelectField\r\n                            placeholder={t(\"movement\")}\r\n                            value={state.fields.movement ? movement_options.find( option => option.value === state.fields.movement ) : null}\r\n                            onChange={(option: { value: string }) => dispatch(addWatcheSlice.actions.set({ field: \"movement\", value: option.value }))}\r\n                            options={movement_options} />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <button className=\"button round bg-gray color-gold margin-top-30\" style={{ padding: \"0 70px\" }}\r\n                    onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                        e.preventDefault();\r\n                        dispatch(addWatcheSlice.actions.setStep(2))\r\n                    }}\r\n                >{t(\"back\")}</button>\r\n                <span className=\"margin-20\"></span>\r\n                <button className=\"button round bg-gold color-white margin-top-30\" style={{ padding: \"0 80px\", marginBottom: 5 }}>{t(\"submit\")}</button>\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Offers\\Offers.tsx",["313","314","315","316","317","318","319","320"],"E:\\Self Projects\\timepiece\\src\\containers\\Offers\\OffersSclice.tsx",["321"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n// Models\r\nexport interface watch {\r\n    id: string,\r\n    name: string,\r\n    model: string,\r\n    description: string,\r\n    condition: string,\r\n    location: string,\r\n    delivery: string,\r\n    price: number,\r\n    proposed_price: number,\r\n    production_year: number,\r\n    case_material: string,\r\n    movement: string,\r\n    bracelet_material: string,\r\n    gender: string,\r\n    calibar: string,\r\n    base_calibar: string,\r\n    power_reserve: number,\r\n    jewels: number,\r\n    case_diameter: number,\r\n    water_resistance: number,\r\n    bezel_material: string,\r\n    crystal: string,\r\n    dial: string,\r\n    dial_numbers: string,\r\n    bracelet_color: string,\r\n    clasp: string,\r\n    clasp_material: string,\r\n}\r\n\r\n\r\nexport interface user {\r\n    id: string,\r\n    username: string,\r\n    name: string,\r\n    email: string,\r\n    phone: string,\r\n    birth: string,\r\n    gender: string,\r\n    address: string,\r\n    offers: watch[],\r\n}\r\n\r\n// Users state\r\nexport interface offersState {\r\n    isLoaded: boolean, // First load\r\n    isLoading: boolean, // On filtering laoder\r\n    isFetching: boolean,\r\n    users: user[],\r\n    userDetailsIsOpen: boolean,\r\n    watchDetailsIsOpen: boolean,\r\n    loadingStatuses: string[],\r\n    activeUser: string,\r\n    activeWatch: string,\r\n}\r\n\r\nconst initialOffersState: offersState = {\r\n    isLoaded: false,\r\n    isLoading: false,\r\n    isFetching: false,\r\n    users: [],\r\n    userDetailsIsOpen: false,\r\n    watchDetailsIsOpen: false,\r\n    loadingStatuses: [],\r\n    activeUser: \"\",\r\n    activeWatch: \"\",\r\n}\r\n\r\n// Users slice\r\nexport const offersSlice = createSlice({\r\n    name: 'offers',\r\n    initialState: initialOffersState,\r\n    reducers: {\r\n        setIsLoaded: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoaded = payload\r\n        },\r\n        setIsLoading: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoading = payload\r\n        },\r\n        setIsFetching: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isFetching = payload\r\n        },\r\n        addUsers: ( state, {payload}: PayloadAction<user[]> ) => {\r\n            state.users = [ ...state.users, ...payload ]\r\n        },\r\n        setUserDetailsIsOpen: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.userDetailsIsOpen = payload\r\n        },\r\n        setWatchDetailsIsOpen: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.watchDetailsIsOpen = payload\r\n        },\r\n        addToLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.loadingStatuses.push(payload)\r\n        },\r\n        removeFromLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            let index = state.loadingStatuses.findIndex( status => status === payload )\r\n            if( index != -1 )\r\n                state.loadingStatuses.splice( index, 1 )\r\n        },\r\n        setActiveUser: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.activeUser = payload\r\n        },\r\n        setActiveWatch: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.activeWatch = payload\r\n        },\r\n    }\r\n})","E:\\Self Projects\\timepiece\\src\\containers\\Brands\\AddModal\\AddBrandSlice.ts",[],"E:\\Self Projects\\timepiece\\src\\containers\\Brands\\BrandsSlice.tsx",["322","323"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n// Models\r\nexport interface brand {\r\n    id: string,\r\n    name: string,\r\n}\r\n\r\n// Brands state\r\nexport interface brandsState {\r\n    isLoaded: boolean, // First load\r\n    isLoading: boolean, // On delete/update laoder\r\n    isFetching: boolean,\r\n    hasMore: boolean,\r\n    brands: brand[],\r\n    loadingStatuses: string[],\r\n    openAddModal: boolean\r\n}\r\n\r\nconst initialBrandsState: brandsState = {\r\n    isLoaded: false,\r\n    isLoading: false,\r\n    isFetching: false,\r\n    hasMore: true,\r\n    brands:[],\r\n    loadingStatuses: [],\r\n    openAddModal: false\r\n}\r\n\r\n// Users slice\r\nexport const brandsSlice = createSlice({\r\n    name: 'brands',\r\n    initialState: initialBrandsState,\r\n    reducers: {\r\n        setIsLoaded: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoaded = payload\r\n        },\r\n        setIsLoading: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoading = payload\r\n        },\r\n        setIsFetching: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isFetching = payload\r\n        },\r\n        setHasMore: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.hasMore = payload\r\n        },\r\n        addBrands: ( state, {payload}: PayloadAction<brand[]> ) => {\r\n            state.brands = [ ...state.brands, ...payload ]\r\n        },\r\n        updateBrand: ( state, {payload}: PayloadAction<brand> ) => {\r\n            let index = state.brands.findIndex( brand => brand.id === payload.id )\r\n            alert(index)\r\n            if( index !== -1 )\r\n                state.brands[index] = payload\r\n        },\r\n        deleteBrands: ( state, {payload}: PayloadAction<string[]> ) => {\r\n            payload.map(id => {\r\n                let index = state.brands.findIndex( brand => brand.id === id )\r\n                if( index != -1 )\r\n                    state.brands.splice( index, 1 )\r\n            })\r\n        },\r\n        setOpenAddModal: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.openAddModal = payload\r\n        },\r\n    }\r\n})","E:\\Self Projects\\timepiece\\src\\containers\\Brands\\Brands.tsx",["324","325","326","327"],"import React, { useState } from 'react'\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { brand, brandsSlice, brandsState } from './BrandsSlice'\r\nimport { addBrandSlice } from './AddModal/AddBrandSlice'\r\n\r\n// API\r\nimport API from '../../services/api/api'\r\n\r\n// Components\r\nimport TableActionBar from '../../components/TableActionBar/TableActionBar'\r\nimport { DashboardTable } from '../../components/Table/Table'\r\nimport { EllipsisLoader, WhiteboxLoader } from '../../components/Loader/Loader'\r\nimport { SelectField } from '../../components/FormElements/FormElements'\r\nimport AddBrandModal from './AddModal/AddBrandModal'\r\n\r\nexport default () => {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state = useSelector( ( state: { brands: brandsState } ) => state.brands )\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    // Search\r\n    const search = () => {}\r\n\r\n    // Fetch Data\r\n    const fetchData = (page: number, page_size: number = 10) => {\r\n        \r\n        dispatch( brandsSlice.actions.setIsFetching(true) )\r\n\r\n        ENDPOINTS.brands().index( { limit: page_size, offset: page - 1 } )\r\n        .then( (response: any) => {\r\n\r\n            // Has more\r\n            if( response.data?.data?.getBrands?.total <= page * page_size )\r\n                dispatch( brandsSlice.actions.setHasMore(false) )\r\n            \r\n            let brands: brand[] = []\r\n\r\n            response.data?.data?.getBrands?.results?.map( (item: any) => {\r\n                brands.push({\r\n                    id: String(item.id),\r\n                    name: String(item.name ? item.name : \"N/A\"),\r\n                })\r\n            })\r\n\r\n            dispatch( brandsSlice.actions.addBrands(brands) )\r\n            dispatch( brandsSlice.actions.setIsLoaded(true) )\r\n            dispatch( brandsSlice.actions.setIsFetching(false) )\r\n        })\r\n\r\n    }\r\n\r\n    interface tableDataType { [key: string]: { [key: string]: any } }\r\n    const generateData: () => tableDataType = () => {\r\n        let data: tableDataType = {}\r\n        state.brands.map( (item, index) => {\r\n            data[item.id] = {\r\n                name: item.name,\r\n                actions: <div className=\"show-on-hover\">\r\n                            <i className=\"icon-edit\" onClick={(e: React.MouseEvent<HTMLLIElement>) => edit(e, item.id) } />\r\n                            <i className=\"icon-delete\" onClick={(e: React.MouseEvent<HTMLLIElement>) => {\r\n                                e.stopPropagation()\r\n                                remove(item.id)\r\n                            }} />\r\n                        </div>\r\n            }\r\n        })\r\n        return data\r\n    }\r\n\r\n    // Edit\r\n    const edit = (e: React.MouseEvent<HTMLLIElement>, id: string) => {\r\n        e.stopPropagation()\r\n        let brandToEdit = state.brands.find(brand => brand.id === id)\r\n        if(brandToEdit) {\r\n            dispatch( addBrandSlice.actions.set({\r\n                name: brandToEdit.name,\r\n            }) )\r\n            dispatch( addBrandSlice.actions.setEditId(brandToEdit.id) )\r\n            dispatch( brandsSlice.actions.setOpenAddModal(true) )\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Toggle Selected id\r\n    const [selectedIds, setSelectedIds] = useState<string[]>([]);\r\n    const toggleSelectedId = (id: string) => {\r\n        let index = selectedIds.findIndex(selectedId => selectedId === id)\r\n        if( index !== -1 ) {\r\n            setSelectedIds(selectedIds.filter(selectedId => selectedId !== id))\r\n        } else\r\n            setSelectedIds([...selectedIds, id])\r\n    }\r\n\r\n    // Delete\r\n    const remove = (id? :string) => {\r\n        \r\n        dispatch( brandsSlice.actions.setIsLoading(true) )\r\n\r\n        ENDPOINTS.brands().delete(id ? [id] : selectedIds)\r\n        .then(() => {\r\n            dispatch( brandsSlice.actions.setIsLoading(false) )\r\n            dispatch( brandsSlice.actions.deleteBrands(id ? [id] : selectedIds) )\r\n            if(!id) setSelectedIds([])\r\n        })\r\n\r\n    }\r\n\r\n\r\n    // First fetch\r\n    if( !state.isLoaded && !state.isFetching )\r\n        fetchData(1)\r\n\r\n    return(\r\n        <>\r\n            { state.isLoaded ?\r\n            <>\r\n                { state.isLoading ? <WhiteboxLoader /> : \"\"}\r\n                <TableActionBar\r\n                    title={t(\"brands\")}\r\n                    search={search}\r\n                    showFilter={false}\r\n                    showDelete={selectedIds.length > 0}\r\n                    add={() => dispatch( brandsSlice.actions.setOpenAddModal(true) )}\r\n                    addText={t(\"add_to_brands\")}\r\n                    delete={remove}\r\n                    />\r\n                \r\n                <DashboardTable\r\n                    header={[ t(\"name\"), \"\" ]}\r\n                    body={generateData()}\r\n                    onSelect={toggleSelectedId}\r\n                    hasMore={state.hasMore}\r\n                    loadMore={fetchData}\r\n                    />\r\n                \r\n                <AddBrandModal />\r\n\r\n            </> : <div className=\"center\"><EllipsisLoader /></div> }\r\n        </>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Brands\\AddModal\\AddBrandModal.tsx",["328"],"import React, { useState } from 'react'\r\n\r\n// Gird system\r\nimport { Col, Row } from 'react-grid-system'\r\n\r\n// Translation\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { brandsSlice, brandsState, brand } from '../BrandsSlice'\r\nimport { addBrandSlice, addBrandState } from './AddBrandSlice'\r\n\r\n// API\r\nimport API from '../../../services/api/api'\r\n\r\n// Components\r\nimport Modal from '../../../components/Modal/Modal'\r\nimport { SuccessMark, WhiteboxLoader } from '../../../components/Loader/Loader'\r\nimport { InputField } from '../../../components/FormElements/FormElements'\r\n\r\n\r\nexport default () => {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n    \r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const brandsState = useSelector( ( state: { brands: brandsState } ) => state.brands )\r\n    const addState = useSelector( ( state: { add_brand: addBrandState } ) => state.add_brand )\r\n\r\n    // Hooks\r\n    const [ nameError, setNameError ] = useState<string>(\"\")\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    const toggle = () => {\r\n        dispatch( brandsSlice.actions.setOpenAddModal(false) )\r\n        dispatch( addBrandSlice.actions.init() )\r\n        setNameError(\"\")\r\n    }\r\n\r\n    const submitBrand = (e: React.FormEvent<HTMLFormElement>) => {\r\n\r\n        e.preventDefault()\r\n\r\n        if( addState.name === \"\" ) {\r\n            setNameError(t(\"required_error\"))\r\n            return\r\n        }\r\n\r\n        // Submit\r\n        dispatch(addBrandSlice.actions.setIsLoading(true))\r\n\r\n        let api_call = addState.editId ? ENDPOINTS.brands().update(addState.name, addState.editId) : ENDPOINTS.brands().add(addState.name)\r\n\r\n        api_call\r\n            .then((response: any) => {\r\n                \r\n                dispatch(addBrandSlice.actions.setIsLoading(false))\r\n                \r\n                if(response.data?.errors) {\r\n                    setNameError(t(\"brand_already_exists\"))\r\n                    return\r\n                }\r\n\r\n                dispatch(addBrandSlice.actions.setIsSuccess(true))\r\n\r\n                setTimeout(() => {\r\n                    dispatch( addBrandSlice.actions.init() )\r\n                    dispatch(brandsSlice.actions.setOpenAddModal(false))\r\n                }, 2000);\r\n\r\n                // Add to table\r\n                let brand: brand = {\r\n                    id: addState.editId ? String(response.data?.data?.updateBrand?.id) : String(response.data?.data?.createBrand?.id),\r\n                    name: String(addState.name ? addState.name : \"N/A\"),\r\n                }\r\n\r\n                if( addState.editId )\r\n                    dispatch(brandsSlice.actions.updateBrand(brand))\r\n                else\r\n                    dispatch(brandsSlice.actions.addBrands([brand]))\r\n\r\n            })\r\n\r\n    }\r\n\r\n    return(\r\n        <Modal open={brandsState.openAddModal} toggle={toggle}>\r\n            \r\n            { addState.isLoading ? <WhiteboxLoader /> : \"\" }\r\n            { addState.isSuccess ? <SuccessMark /> : \"\" }\r\n\r\n            <h2 className=\"text-center\" style={{ margin: \"0 0 20px\" }}>\r\n                {t(\"brand_information\")}\r\n            </h2>\r\n\r\n            \r\n        <div className=\"step2\" style={{ width: 500, maxWidth: \"90vw\" }}>\r\n            <form onSubmit={submitBrand}>\r\n\r\n                <Row>\r\n                    <Col md={12} className=\"add-brand\">\r\n                        <InputField\r\n                            label={t(\"name\")}\r\n                            error={nameError}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                dispatch(addBrandSlice.actions.set({ name: e.target.value }))\r\n                                setNameError(\"\")\r\n                            }}\r\n                            value={addState.name} />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <button className=\"button round bg-gold color-white margin-top-30\" style={{ padding: \"0 80px\", marginBottom: 5 }}>{t(\"submit\")}</button>\r\n\r\n            </form>\r\n\r\n        </div>\r\n\r\n        </Modal>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\components\\PredefinedMenus\\PredefinedMenusSlice.ts",[],"E:\\Self Projects\\timepiece\\src\\components\\PredefinedMenus\\PredefinedMenus.tsx",["329"],"import React, { useState } from 'react'\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { predefinedMenusSlice, predefinedState } from './PredefinedMenusSlice'\r\n\r\n// API\r\nimport API from '../../services/api/api'\r\n\r\n// Components\r\nimport { SelectField } from '../FormElements/FormElements'\r\n\r\nexport const BrandsMenu = (props: any) => {\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state: predefinedState = useSelector( ( state: { predefined_menus: predefinedState } ) => state.predefined_menus )\r\n\r\n    // Hooks\r\n    const [ isFetching, setIsFetching ] = useState<boolean>(false)\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    const fetchData = () => {\r\n        ENDPOINTS.brands().index({ limit: 1000, offset: 0 })\r\n        .then((response: any) => {\r\n            let brands: {label: string, value: string}[] = []\r\n            response.data?.data?.getBrands?.results?.map((brand: {name: string}) => {\r\n                brands.push({ label: brand.name, value: brand.name })\r\n            })\r\n            dispatch( predefinedMenusSlice.actions.setBrands(brands) )\r\n            setIsFetching(false)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <SelectField\r\n            {...props}\r\n            isLoading={isFetching}\r\n            options={state.brands.list}\r\n            onMenuOpen={() => {\r\n                if( !state.brands.isLoaded && !isFetching ) {\r\n                    setIsFetching(true)\r\n                    fetchData()\r\n                }\r\n                \r\n            }}\r\n        />\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Orders\\OrdersSclice.tsx",["330"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n// Models\r\nexport interface watch {\r\n    id: string,\r\n    name: string,\r\n    model: string,\r\n    description: string,\r\n    condition: string,\r\n    location: string,\r\n    delivery: string,\r\n    price: number,\r\n    proposed_price: number,\r\n    production_year: number,\r\n    case_material: string,\r\n    movement: string,\r\n    bracelet_material: string,\r\n    gender: string,\r\n    calibar: string,\r\n    base_calibar: string,\r\n    power_reserve: number,\r\n    jewels: number,\r\n    case_diameter: number,\r\n    water_resistance: number,\r\n    bezel_material: string,\r\n    crystal: string,\r\n    dial: string,\r\n    dial_numbers: string,\r\n    bracelet_color: string,\r\n    clasp: string,\r\n    clasp_material: string,\r\n}\r\n\r\n\r\nexport interface user {\r\n    id: string,\r\n    username: string,\r\n    name: string,\r\n    email: string,\r\n    phone: string,\r\n    birth: string,\r\n    gender: string,\r\n    address: string,\r\n    orders: watch[],\r\n}\r\n\r\n// Users state\r\nexport interface ordersState {\r\n    isLoaded: boolean, // First load\r\n    isLoading: boolean, // On filtering laoder\r\n    isFetching: boolean,\r\n    users: user[],\r\n    userDetailsIsOpen: boolean,\r\n    watchDetailsIsOpen: boolean,\r\n    loadingStatuses: string[],\r\n    activeUser: string,\r\n    activeWatch: string,\r\n}\r\n\r\nconst initialOrdersState: ordersState = {\r\n    isLoaded: false,\r\n    isLoading: false,\r\n    isFetching: false,\r\n    users: [],\r\n    userDetailsIsOpen: false,\r\n    watchDetailsIsOpen: false,\r\n    loadingStatuses: [],\r\n    activeUser: \"\",\r\n    activeWatch: \"\",\r\n}\r\n\r\n// Users slice\r\nexport const ordersSlice = createSlice({\r\n    name: 'orders',\r\n    initialState: initialOrdersState,\r\n    reducers: {\r\n        setIsLoaded: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoaded = payload\r\n        },\r\n        setIsLoading: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isLoading = payload\r\n        },\r\n        setIsFetching: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.isFetching = payload\r\n        },\r\n        addUsers: ( state, {payload}: PayloadAction<user[]> ) => {\r\n            state.users = [ ...state.users, ...payload ]\r\n        },\r\n        setUserDetailsIsOpen: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.userDetailsIsOpen = payload\r\n        },\r\n        setWatchDetailsIsOpen: ( state, {payload}: PayloadAction<boolean> ) => {\r\n            state.watchDetailsIsOpen = payload\r\n        },\r\n        addToLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.loadingStatuses.push(payload)\r\n        },\r\n        removeFromLoadingStatuses: ( state, {payload}: PayloadAction<string> ) => {\r\n            let index = state.loadingStatuses.findIndex( status => status === payload )\r\n            if( index != -1 )\r\n                state.loadingStatuses.splice( index, 1 )\r\n        },\r\n        setActiveUser: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.activeUser = payload\r\n        },\r\n        setActiveWatch: ( state, {payload}: PayloadAction<string> ) => {\r\n            state.activeWatch = payload\r\n        },\r\n    }\r\n})","E:\\Self Projects\\timepiece\\src\\containers\\Orders\\Orders.tsx",["331","332","333","334","335","336","337","338"],"E:\\Self Projects\\timepiece\\src\\containers\\ResetPasswordForm\\ResetPasswordFormSlice.tsx",[],"E:\\Self Projects\\timepiece\\src\\pages\\ResetPassword\\ResetPassword.tsx",["339","340"],"import ResetPasswordForm from \"../../containers/ResetPasswordForm/ResetPasswordForm\"\r\n\r\n// Redux\r\nimport { useSelector } from \"react-redux\"\r\nimport { resetPasswordState } from \"../../containers/ResetPasswordForm/ResetPasswordFormSlice\"\r\n\r\nimport Logo from '../../assets/images/logo/primary.svg'\r\nimport { LanguageSwitcher, LightDarkModeSwitcher } from \"../../components/FormElements/FormElements\"\r\n\r\nexport default () => {\r\n\r\n    const resetPasswordState = useSelector((state: { reset_password: resetPasswordState }) => state.reset_password)\r\n\r\n    return(\r\n        <div className=\"login-page\">\r\n            \r\n            <div className=\"layout\">\r\n\r\n                <div className=\"form-holder\">\r\n                    \r\n                    { resetPasswordState.isSuccess ? \"\" : <div className=\"text-center\"><img src={Logo} className=\"logo\" /></div> }\r\n\r\n                    <ResetPasswordForm />\r\n\r\n                </div>\r\n\r\n                <div className=\"switch-actions\">\r\n                    <LightDarkModeSwitcher />\r\n                    <LanguageSwitcher />\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\ResetPasswordForm\\ResetPasswordForm.tsx",["341","342","343","344"],"import React, { useState } from \"react\";\r\n\r\n// Translation\r\nimport { useTranslation } from \"react-multi-lang\";\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { resetPasswordSlice, resetPasswordState } from \"./ResetPasswordFormSlice\";\r\n\r\n// Compoentns\r\nimport { Checkbox, InputField } from \"../../components/FormElements/FormElements\";\r\nimport { RippleLoader, SuccessMark } from \"../../components/Loader/Loader\";\r\nimport { StaticAlert } from \"../../components/Alerts/Alerts\";\r\n\r\n\r\n\r\n// Services\r\nimport API from '../../services/api/api'\r\n\r\nexport default function () {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const state = useSelector((state: { reset_password: resetPasswordState }) => state.reset_password)\r\n\r\n    // Hooks\r\n    const [password, setPassword] = useState<string>(\"\");\r\n    const [passwordError, setPasswordError] = useState<string>(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\r\n    const [confirmPasswordError, setConfirmPasswordError] = useState<string>(\"\");\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    const reset_password = () => {\r\n\r\n\r\n        if (!password) {\r\n            setPasswordError(t(\"required_error\"))\r\n            return\r\n        }\r\n\r\n        if (!confirmPassword) {\r\n            setConfirmPasswordError(t(\"required_error\"))\r\n            return\r\n        }\r\n\r\n        if( password !== confirmPassword ) {\r\n            setConfirmPasswordError(t(\"passwords_didnt_match\"))\r\n            return\r\n        }\r\n\r\n        dispatch(resetPasswordSlice.actions.load())\r\n\r\n        setTimeout(() => {\r\n            dispatch(resetPasswordSlice.actions.success())\r\n        }, 1000);\r\n\r\n        // ENDPOINTS.auth().login({ username, password })\r\n        // .then((response: any) => {\r\n\r\n        //     if(response.data.data) {\r\n\r\n        //         dispatch( loginSlice.actions.success() )\r\n        //         setShowSuccessMark(true)\r\n        //         setTimeout(() => {\r\n        //             let expires: Date = rememberMe ? addToDate( new Date(), \"years\", 1 ) : addToDate( new Date(), \"hours\", 1 );\r\n        //             setCookie(\"userinfo\", response.data.data.loginAdmin.user, { expires: expires })\r\n        //             setCookie(\"token\", { accessToken: response.data.data.loginAdmin.accessToken, refreshToken: response.data.data.loginAdmin.refreshToken }, { expires: addToDate( new Date(), \"minutes\", 29 ) })\r\n        //             dispatch( loginSlice.actions.init() )\r\n        //         }, 1500);\r\n\r\n        //     } else {\r\n        //         dispatch( loginSlice.actions.error(true) )\r\n        //     }\r\n\r\n        // })\r\n        // .catch((error: any) => {\r\n        //     dispatch( loginSlice.actions.error(true) )\r\n        // })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-form\">\r\n\r\n            <form onSubmit={(e: React.FormEvent<HTMLFormElement>) => e.preventDefault()}>\r\n\r\n                {\r\n                    state.isError ? <StaticAlert show={true} type={\"error\"}>{t(\"login_error\")}</StaticAlert> : \"\"\r\n                }\r\n\r\n                {\r\n                    state.isSuccess ? <div className=\"text-center\"><StaticAlert show={true} type={\"success\"}>{t(\"reset_success\")}</StaticAlert></div> :\r\n                        <>\r\n                            <InputField\r\n                                value={password}\r\n                                type=\"password\"\r\n                                placeholder={t('password')}\r\n                                error={passwordError}\r\n                                disabled={state.isLoading || state.isSuccess}\r\n                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                    setPassword(e.currentTarget.value);\r\n                                    setPasswordError(\"\")\r\n                                    if (state.isError) dispatch(resetPasswordSlice.actions.error(false))\r\n                                }} />\r\n\r\n                            <InputField\r\n                                value={confirmPassword}\r\n                                type=\"password\"\r\n                                placeholder={t('confirm_password')}\r\n                                error={confirmPasswordError}\r\n                                disabled={state.isLoading || state.isSuccess}\r\n                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                    setConfirmPassword(e.currentTarget.value);\r\n                                    setConfirmPasswordError(\"\")\r\n                                    if (state.isError) dispatch(resetPasswordSlice.actions.error(false))\r\n                                }} />\r\n\r\n                            <div className=\"text-center margin-top-40\"><button className={\"button bg-gold color-white round\" + (state.isSuccess ? \" scale\" : '')} style={{ width: state.isLoading ? 50 : 200 }} onClick={reset_password}>{state.isLoading ? <RippleLoader /> : t('reset_password')}</button></div>\r\n                        </>}\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n\r\n}","E:\\Self Projects\\timepiece\\src\\containers\\Certificates\\CertificatesSlice.ts",[],"E:\\Self Projects\\timepiece\\src\\containers\\Certificates\\Certificates.tsx",[],[],"E:\\Self Projects\\timepiece\\src\\containers\\Notifications\\Notifications.tsx",["345","346"],"import React, { useState } from 'react'\r\n\r\n// Translation\r\nimport { useTranslation } from 'react-multi-lang'\r\n\r\n// Stylesheet\r\nimport './Notifications.css'\r\n\r\n// Assets\r\nimport notifications from '../../assets/images/vector/notifications.svg'\r\n\r\n// Components\r\nimport { InputField, Textarea } from '../../components/FormElements/FormElements'\r\nimport { WhiteboxLoader } from '../../components/Loader/Loader'\r\nimport API from '../../services/api/api'\r\n\r\nexport default () => {\r\n\r\n    // Translation\r\n    const t = useTranslation()\r\n\r\n    // React Hooks\r\n    const [notificationTitle, setNotificationTitle] = useState<string>(\"\")\r\n    const [notification, setNotification] = useState<string>(\"\")\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n    // API\r\n    const ENDPOINTS = new API()\r\n\r\n    const sendNotification = (e: React.FormEvent<HTMLFormElement>) => {\r\n\r\n        e.preventDefault()\r\n\r\n        setIsLoading(true)\r\n\r\n        ENDPOINTS.notifications().send({ title: notificationTitle, body: notification })\r\n        .then((response: any) => {\r\n            setIsLoading(false)\r\n            setNotificationTitle(\"\")\r\n            setNotification(\"\")\r\n        })\r\n\r\n    }\r\n\r\n    return(\r\n        <div className=\"notifications\">\r\n            { isLoading ? <WhiteboxLoader /> : \"\" }\r\n            <img src={notifications} />\r\n            <form className=\"margin-top-30\" onSubmit={sendNotification}>\r\n                <InputField\r\n                    value={notificationTitle}\r\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setNotificationTitle(e.target.value)}\r\n                    placeholder={t(\"notification_title\")} />\r\n                <Textarea\r\n                    value={notification}\r\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setNotification(e.target.value)}\r\n                    placeholder={t(\"notification_text\")}\r\n                    rows={4} />\r\n                <button className=\"button bg-gold color-white round margin-top-20\" style={{ padding: \"0 50px\" }}>{t(\"send_notification\")}</button>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n} ",{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","severity":1,"message":"352","line":25,"column":1,"nodeType":"353","endLine":141,"endColumn":2},{"ruleId":"354","severity":1,"message":"355","line":44,"column":12,"nodeType":"356","messageId":"357","endLine":44,"endColumn":13},{"ruleId":"358","severity":1,"message":"359","line":15,"column":50,"nodeType":"360","endLine":15,"endColumn":85},{"ruleId":"361","severity":1,"message":"362","line":17,"column":70,"nodeType":"363","messageId":"364","endLine":17,"endColumn":72},{"ruleId":"354","severity":1,"message":"365","line":1,"column":8,"nodeType":"356","messageId":"357","endLine":1,"endColumn":13},{"ruleId":"354","severity":1,"message":"366","line":12,"column":8,"nodeType":"356","messageId":"357","endLine":12,"endColumn":20},{"ruleId":"351","severity":1,"message":"367","line":19,"column":1,"nodeType":"353","endLine":113,"endColumn":2},{"ruleId":"354","severity":1,"message":"368","line":2,"column":26,"nodeType":"356","messageId":"357","endLine":2,"endColumn":37},{"ruleId":"369","severity":1,"message":"370","line":29,"column":38,"nodeType":"371","messageId":"372","endLine":29,"endColumn":40},{"ruleId":"354","severity":1,"message":"355","line":70,"column":12,"nodeType":"356","messageId":"357","endLine":70,"endColumn":13},{"ruleId":"354","severity":1,"message":"373","line":70,"column":15,"nodeType":"356","messageId":"357","endLine":70,"endColumn":17},{"ruleId":"358","severity":1,"message":"359","line":81,"column":13,"nodeType":"360","endLine":81,"endColumn":48},{"ruleId":"354","severity":1,"message":"374","line":13,"column":10,"nodeType":"356","messageId":"357","endLine":13,"endColumn":19},{"ruleId":"351","severity":1,"message":"367","line":15,"column":1,"nodeType":"353","endLine":115,"endColumn":2},{"ruleId":"354","severity":1,"message":"375","line":32,"column":13,"nodeType":"356","messageId":"357","endLine":32,"endColumn":20},{"ruleId":"376","severity":1,"message":"377","line":59,"column":8,"nodeType":"378","endLine":59,"endColumn":10,"suggestions":"379"},{"ruleId":"354","severity":1,"message":"380","line":61,"column":9,"nodeType":"356","messageId":"357","endLine":61,"endColumn":24},{"ruleId":"354","severity":1,"message":"381","line":62,"column":9,"nodeType":"356","messageId":"357","endLine":62,"endColumn":26},{"ruleId":"354","severity":1,"message":"382","line":80,"column":9,"nodeType":"356","messageId":"357","endLine":80,"endColumn":21},{"ruleId":"354","severity":1,"message":"383","line":81,"column":9,"nodeType":"356","messageId":"357","endLine":81,"endColumn":23},{"ruleId":"354","severity":1,"message":"384","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":19},{"ruleId":"354","severity":1,"message":"385","line":3,"column":22,"nodeType":"356","messageId":"357","endLine":3,"endColumn":33},{"ruleId":"351","severity":1,"message":"367","line":15,"column":1,"nodeType":"353","endLine":111,"endColumn":2},{"ruleId":"376","severity":1,"message":"386","line":42,"column":8,"nodeType":"378","endLine":42,"endColumn":10,"suggestions":"387"},{"ruleId":"354","severity":1,"message":"388","line":14,"column":12,"nodeType":"356","messageId":"357","endLine":14,"endColumn":21},{"ruleId":"354","severity":1,"message":"389","line":14,"column":23,"nodeType":"356","messageId":"357","endLine":14,"endColumn":35},{"ruleId":"354","severity":1,"message":"390","line":15,"column":11,"nodeType":"356","messageId":"357","endLine":15,"endColumn":13},{"ruleId":"351","severity":1,"message":"367","line":16,"column":1,"nodeType":"353","endLine":49,"endColumn":2},{"ruleId":"354","severity":1,"message":"391","line":15,"column":25,"nodeType":"356","messageId":"357","endLine":15,"endColumn":30},{"ruleId":"354","severity":1,"message":"392","line":15,"column":32,"nodeType":"356","messageId":"357","endLine":15,"endColumn":39},{"ruleId":"354","severity":1,"message":"393","line":15,"column":41,"nodeType":"356","messageId":"357","endLine":15,"endColumn":47},{"ruleId":"354","severity":1,"message":"394","line":18,"column":8,"nodeType":"356","messageId":"357","endLine":18,"endColumn":14},{"ruleId":"351","severity":1,"message":"367","line":33,"column":1,"nodeType":"353","endLine":248,"endColumn":2},{"ruleId":"354","severity":1,"message":"395","line":52,"column":11,"nodeType":"356","messageId":"357","endLine":52,"endColumn":14},{"ruleId":"369","severity":1,"message":"370","line":92,"column":73,"nodeType":"371","messageId":"372","endLine":92,"endColumn":75},{"ruleId":"369","severity":1,"message":"370","line":117,"column":41,"nodeType":"371","messageId":"372","endLine":117,"endColumn":43},{"ruleId":"396","severity":1,"message":"397","line":168,"column":17,"nodeType":"360","endLine":168,"endColumn":234},{"ruleId":"369","severity":1,"message":"370","line":61,"column":28,"nodeType":"371","messageId":"372","endLine":61,"endColumn":30},{"ruleId":"361","severity":1,"message":"398","line":63,"column":27,"nodeType":"363","messageId":"364","endLine":63,"endColumn":29},{"ruleId":"361","severity":1,"message":"398","line":75,"column":23,"nodeType":"363","messageId":"364","endLine":75,"endColumn":25},{"ruleId":"369","severity":1,"message":"370","line":61,"column":28,"nodeType":"371","messageId":"372","endLine":61,"endColumn":30},{"ruleId":"361","severity":1,"message":"398","line":63,"column":27,"nodeType":"363","messageId":"364","endLine":63,"endColumn":29},{"ruleId":"361","severity":1,"message":"398","line":75,"column":23,"nodeType":"363","messageId":"364","endLine":75,"endColumn":25},{"ruleId":"354","severity":1,"message":"391","line":15,"column":25,"nodeType":"356","messageId":"357","endLine":15,"endColumn":30},{"ruleId":"354","severity":1,"message":"392","line":15,"column":32,"nodeType":"356","messageId":"357","endLine":15,"endColumn":39},{"ruleId":"354","severity":1,"message":"393","line":15,"column":41,"nodeType":"356","messageId":"357","endLine":15,"endColumn":47},{"ruleId":"354","severity":1,"message":"399","line":17,"column":10,"nodeType":"356","messageId":"357","endLine":17,"endColumn":26},{"ruleId":"354","severity":1,"message":"394","line":18,"column":8,"nodeType":"356","messageId":"357","endLine":18,"endColumn":14},{"ruleId":"354","severity":1,"message":"400","line":24,"column":10,"nodeType":"356","messageId":"357","endLine":24,"endColumn":21},{"ruleId":"354","severity":1,"message":"401","line":26,"column":10,"nodeType":"356","messageId":"357","endLine":26,"endColumn":19},{"ruleId":"351","severity":1,"message":"367","line":28,"column":1,"nodeType":"353","endLine":230,"endColumn":2},{"ruleId":"354","severity":1,"message":"395","line":47,"column":11,"nodeType":"356","messageId":"357","endLine":47,"endColumn":14},{"ruleId":"354","severity":1,"message":"402","line":58,"column":11,"nodeType":"356","messageId":"357","endLine":58,"endColumn":32},{"ruleId":"369","severity":1,"message":"370","line":77,"column":70,"nodeType":"371","messageId":"372","endLine":77,"endColumn":72},{"ruleId":"369","severity":1,"message":"370","line":102,"column":40,"nodeType":"371","messageId":"372","endLine":102,"endColumn":42},{"ruleId":"396","severity":1,"message":"397","line":151,"column":17,"nodeType":"360","endLine":151,"endColumn":234},{"ruleId":"369","severity":1,"message":"370","line":95,"column":28,"nodeType":"371","messageId":"372","endLine":95,"endColumn":30},{"ruleId":"361","severity":1,"message":"398","line":97,"column":27,"nodeType":"363","messageId":"364","endLine":97,"endColumn":29},{"ruleId":"361","severity":1,"message":"398","line":115,"column":23,"nodeType":"363","messageId":"364","endLine":115,"endColumn":25},{"ruleId":"361","severity":1,"message":"398","line":123,"column":23,"nodeType":"363","messageId":"364","endLine":123,"endColumn":25},{"ruleId":"351","severity":1,"message":"367","line":23,"column":1,"nodeType":"353","endLine":382,"endColumn":2},{"ruleId":"369","severity":1,"message":"370","line":60,"column":67,"nodeType":"371","messageId":"372","endLine":60,"endColumn":69},{"ruleId":"369","severity":1,"message":"370","line":148,"column":73,"nodeType":"371","messageId":"372","endLine":148,"endColumn":75},{"ruleId":"369","severity":1,"message":"370","line":194,"column":43,"nodeType":"371","messageId":"372","endLine":194,"endColumn":45},{"ruleId":"351","severity":1,"message":"367","line":20,"column":1,"nodeType":"353","endLine":51,"endColumn":2},{"ruleId":"403","severity":1,"message":"404","line":31,"column":35,"nodeType":"405","messageId":"406","endLine":31,"endColumn":37},{"ruleId":"403","severity":1,"message":"404","line":31,"column":65,"nodeType":"405","messageId":"406","endLine":31,"endColumn":67},{"ruleId":"351","severity":1,"message":"367","line":16,"column":1,"nodeType":"353","endLine":52,"endColumn":2},{"ruleId":"351","severity":1,"message":"367","line":19,"column":1,"nodeType":"353","endLine":152,"endColumn":2},{"ruleId":"369","severity":1,"message":"370","line":71,"column":51,"nodeType":"371","messageId":"372","endLine":71,"endColumn":53},{"ruleId":"354","severity":1,"message":"407","line":1,"column":17,"nodeType":"356","messageId":"357","endLine":1,"endColumn":25},{"ruleId":"351","severity":1,"message":"367","line":16,"column":1,"nodeType":"353","endLine":131,"endColumn":2},{"ruleId":"354","severity":1,"message":"407","line":1,"column":17,"nodeType":"356","messageId":"357","endLine":1,"endColumn":25},{"ruleId":"351","severity":1,"message":"367","line":20,"column":1,"nodeType":"353","endLine":187,"endColumn":2},{"ruleId":"354","severity":1,"message":"400","line":18,"column":10,"nodeType":"356","messageId":"357","endLine":18,"endColumn":21},{"ruleId":"351","severity":1,"message":"367","line":25,"column":1,"nodeType":"353","endLine":289,"endColumn":2},{"ruleId":"354","severity":1,"message":"402","line":47,"column":11,"nodeType":"356","messageId":"357","endLine":47,"endColumn":32},{"ruleId":"369","severity":1,"message":"370","line":64,"column":62,"nodeType":"371","messageId":"372","endLine":64,"endColumn":64},{"ruleId":"369","severity":1,"message":"370","line":65,"column":46,"nodeType":"371","messageId":"372","endLine":65,"endColumn":48},{"ruleId":"369","severity":1,"message":"370","line":123,"column":33,"nodeType":"371","messageId":"372","endLine":123,"endColumn":35},{"ruleId":"369","severity":1,"message":"370","line":124,"column":44,"nodeType":"371","messageId":"372","endLine":124,"endColumn":46},{"ruleId":"396","severity":1,"message":"397","line":183,"column":17,"nodeType":"360","endLine":183,"endColumn":234},{"ruleId":"361","severity":1,"message":"398","line":100,"column":23,"nodeType":"363","messageId":"364","endLine":100,"endColumn":25},{"ruleId":"369","severity":1,"message":"370","line":57,"column":28,"nodeType":"371","messageId":"372","endLine":57,"endColumn":30},{"ruleId":"361","severity":1,"message":"398","line":59,"column":27,"nodeType":"363","messageId":"364","endLine":59,"endColumn":29},{"ruleId":"354","severity":1,"message":"400","line":16,"column":10,"nodeType":"356","messageId":"357","endLine":16,"endColumn":21},{"ruleId":"351","severity":1,"message":"367","line":19,"column":1,"nodeType":"353","endLine":153,"endColumn":2},{"ruleId":"369","severity":1,"message":"370","line":48,"column":71,"nodeType":"371","messageId":"372","endLine":48,"endColumn":73},{"ruleId":"369","severity":1,"message":"370","line":65,"column":41,"nodeType":"371","messageId":"372","endLine":65,"endColumn":43},{"ruleId":"351","severity":1,"message":"367","line":23,"column":1,"nodeType":"353","endLine":127,"endColumn":2},{"ruleId":"369","severity":1,"message":"370","line":29,"column":82,"nodeType":"371","messageId":"372","endLine":29,"endColumn":84},{"ruleId":"361","severity":1,"message":"398","line":100,"column":23,"nodeType":"363","messageId":"364","endLine":100,"endColumn":25},{"ruleId":"354","severity":1,"message":"400","line":18,"column":10,"nodeType":"356","messageId":"357","endLine":18,"endColumn":21},{"ruleId":"351","severity":1,"message":"367","line":25,"column":1,"nodeType":"353","endLine":293,"endColumn":2},{"ruleId":"354","severity":1,"message":"402","line":47,"column":11,"nodeType":"356","messageId":"357","endLine":47,"endColumn":32},{"ruleId":"369","severity":1,"message":"370","line":64,"column":62,"nodeType":"371","messageId":"372","endLine":64,"endColumn":64},{"ruleId":"369","severity":1,"message":"370","line":65,"column":46,"nodeType":"371","messageId":"372","endLine":65,"endColumn":48},{"ruleId":"369","severity":1,"message":"370","line":123,"column":33,"nodeType":"371","messageId":"372","endLine":123,"endColumn":35},{"ruleId":"369","severity":1,"message":"370","line":124,"column":44,"nodeType":"371","messageId":"372","endLine":124,"endColumn":46},{"ruleId":"396","severity":1,"message":"397","line":186,"column":17,"nodeType":"360","endLine":186,"endColumn":234},{"ruleId":"351","severity":1,"message":"367","line":10,"column":1,"nodeType":"353","endLine":36,"endColumn":2},{"ruleId":"358","severity":1,"message":"359","line":21,"column":88,"nodeType":"360","endLine":21,"endColumn":123},{"ruleId":"354","severity":1,"message":"408","line":11,"column":10,"nodeType":"356","messageId":"357","endLine":11,"endColumn":18},{"ruleId":"354","severity":1,"message":"409","line":12,"column":24,"nodeType":"356","messageId":"357","endLine":12,"endColumn":35},{"ruleId":"351","severity":1,"message":"352","line":20,"column":1,"nodeType":"353","endLine":131,"endColumn":2},{"ruleId":"354","severity":1,"message":"410","line":36,"column":11,"nodeType":"356","messageId":"357","endLine":36,"endColumn":20},{"ruleId":"351","severity":1,"message":"367","line":17,"column":1,"nodeType":"353","endLine":64,"endColumn":2},{"ruleId":"358","severity":1,"message":"359","line":48,"column":13,"nodeType":"360","endLine":48,"endColumn":40},"no-native-reassign",["411"],"no-negated-in-lhs",["412"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'React' is defined but never used.","'Certificates' is defined but never used.","Assign arrow function to a variable before exporting as module default","'useLocation' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'__' is assigned a value but never used.","'LineChart' is defined but never used.","'success' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["413"],"'LineChartLabels' is assigned a value but never used.","'LineChartDatasets' is assigned a value but never used.","'GrowthLabels' is assigned a value but never used.","'GrowthDatasets' is assigned a value but never used.","'Component' is defined but never used.","'withCookies' is defined but never used.","React Hook useEffect has a missing dependency: 'handleEsc'. Either include it or remove the dependency array.",["414"],"'dasharray' is assigned a value but never used.","'setDasharray' is assigned a value but never used.","'id' is assigned a value but never used.","'Layer' is defined but never used.","'Feature' is defined but never used.","'Marker' is defined but never used.","'marker' is defined but never used.","'Map' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","Expected '!==' and instead saw '!='.","'setRTLTextPlugin' is defined but never used.","'SelectField' is defined but never used.","'useEffect' is defined but never used.","'getDefaultStatusValue' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useState' is defined but never used.","'Checkbox' is defined but never used.","'SuccessMark' is defined but never used.","'ENDPOINTS' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},"Update the dependencies array to be: [fetchData]",{"range":"419","text":"420"},"Update the dependencies array to be: [handleEsc]",{"range":"421","text":"422"},[1614,1616],"[fetchData]",[1033,1035],"[handleEsc]"]